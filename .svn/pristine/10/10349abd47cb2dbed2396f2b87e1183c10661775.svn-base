drop table if exists DS_SQUID;
CREATE TABLE DS_SQUID
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50) NOT NULL,
 SQUID_FLOW_ID INTEGER NOT NULL,
 NAME VARCHAR(300) NOT NULL,
 DESCRIPTION VARCHAR(300),
 SQUID_TYPE_ID INTEGER NOT NULL,
 LOCATION_X INTEGER NOT NULL,
 LOCATION_Y INTEGER NOT NULL,
 SQUID_HEIGHT INTEGER NOT NULL,
 SQUID_WIDTH INTEGER NOT NULL,
 TABLE_NAME VARCHAR(300),
 IS_SHOW_ALL CHARACTER(1),
 SOURCE_IS_SHOW_ALL CHARACTER(1),
 COLUMN_GROUP_X INTEGER,
 COLUMN_GROUP_Y INTEGER,
 REFERENCE_GROUP_X INTEGER,
 REFERENCE_GROUP_Y INTEGER,
 `FILTER` VARCHAR(300),
 ENCODING INTEGER,
 DESIGN_STATUS INTEGER,
 MAX_TRAVEL_DEPTH INTEGER,
  PRIMARY KEY (ID));

drop table if exists DS_SYS_TEAM;
CREATE TABLE DS_SYS_TEAM
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50),
 NAME VARCHAR(100) NOT NULL,
 DESCRIPTION VARCHAR(500),
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));

drop table if exists DS_SQUID_FLOW;
CREATE TABLE DS_SQUID_FLOW
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50) NOT NULL,
 NAME VARCHAR(50),
 CREATION_DATE TIMESTAMP,
 MODIFICATION_DATE datetime,
 CREATOR VARCHAR(50),
 PROJECT_ID INTEGER NOT NULL,
 DESCRIPTION VARCHAR(200),
 COMPILATION_STATUS INTEGER,
 SQUIDFLOW_TYPE INTEGER DEFAULT 0,
  PRIMARY KEY (ID));

drop table if exists DS_SQUID_TYPE;
CREATE TABLE DS_SQUID_TYPE
(ID INTEGER NOT NULL,
 CODE VARCHAR(50),
 DESCRIPTION VARCHAR(250),
  PRIMARY KEY (ID));

CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10389_10400 ON DS_SQUID (NAME ASC, SQUID_FLOW_ID ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10380_10390 ON DS_SQUID (ID ASC);
CREATE INDEX IDX_SQUID_FLOW_ID ON DS_SQUID (SQUID_FLOW_ID ASC);
CREATE INDEX IDX_SQUID_NAME ON DS_SQUID (NAME ASC);
CREATE INDEX IDX_SQUID_TYPE_ID ON DS_SQUID (SQUID_TYPE_ID ASC);
CREATE INDEX SYS_IDX_10667 ON DS_SQUID (SQUID_FLOW_ID ASC);
CREATE INDEX SYS_IDX_10678 ON DS_SQUID (SQUID_TYPE_ID ASC);
ALTER TABLE DS_SQUID ADD CONSTRAINT FK_SQUID_FLOW_ID FOREIGN KEY (SQUID_FLOW_ID) REFERENCES DS_SQUID_FLOW (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE DS_SQUID ADD CONSTRAINT FK_SQUID_TYPE_ID FOREIGN KEY (SQUID_TYPE_ID) REFERENCES DS_SQUID_TYPE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

drop table if exists DS_ANNOTATION_SQUID;
CREATE TABLE DS_ANNOTATION_SQUID
(ID INTEGER AUTO_INCREMENT NOT NULL primary key,
 CONTENT VARCHAR(4000),
 CONTENT_FONT_SIZE INTEGER,
 CONTENT_FONT_COLOR VARCHAR(100),
 CONTENT_FONT_FAMILY VARCHAR(100),
 HORIZONTAL_CONTENT_ALIGNMENT INTEGER,
 VERTICAL_CONTENT_ALIGNMENT INTEGER,
 IS_CONTENT_BOLD CHARACTER(1),
 IS_CONTENT_ITALIC CHARACTER(1),
 IS_CONTENT_UNDERLINE CHARACTER(1));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10509_10510 ON DS_ANNOTATION_SQUID (ID ASC);

drop table if exists DS_COLUMN;
CREATE TABLE DS_COLUMN
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `key` VARCHAR(50),
 RELATIVE_ORDER SMALLINT,
 SQUID_ID INTEGER NOT NULL,
 NAME VARCHAR(128) NOT NULL,
 DATA_TYPE INTEGER NOT NULL,
 COLLATION INTEGER,
 NULLABLE CHARACTER(1),
 LENGTH INTEGER,
 `PRECISION` INTEGER,
 SCALE INTEGER,
 IS_GROUPBY CHARACTER(1),
 AGGREGATION_TYPE INTEGER,
 DESCRIPTION VARCHAR(500),
 ISUNIQUE CHARACTER(1),
 ISPK CHARACTER(1),
 CDC INTEGER,
 IS_BUSINESS_KEY INTEGER,
 SORT_LEVEL INTEGER,
 SORT_TYPE INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10265_10271 ON DS_COLUMN (SQUID_ID ASC, NAME ASC);
CREATE INDEX IDX_COLUMN_SQUID_ID ON DS_COLUMN (SQUID_ID ASC);
CREATE INDEX SYS_IDX_10586 ON DS_COLUMN (SQUID_ID ASC);
ALTER TABLE DS_COLUMN ADD CONSTRAINT FK_SQUID_ID FOREIGN KEY (SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

drop table if exists DS_DATA_SQUID;
CREATE TABLE DS_DATA_SQUID
(ID INTEGER NOT NULL AUTO_INCREMENT,
 IS_INCREMENTAL CHARACTER(1),
 INCREMENTAL_EXPRESSION VARCHAR(4000),
 IS_PERSISTED CHARACTER(1),
 TABLE_NAME VARCHAR(100),
 DESTINATION_SQUID_ID INTEGER,
 IS_INDEXED CHARACTER(1),
 TOP_N INTEGER,
 TRUNCATE_EXISTING_DATA_FLAG INTEGER,
 PROCESS_MODE INTEGER,
 CDC INTEGER,
 EXCEPTION_HANDLING_FLAG INTEGER,
 LOG_FORMAT INTEGER,
 POST_PROCESS INTEGER,
 XSD_DTD_FILE VARCHAR(100),
 XSD_DTD_PATH VARCHAR(200),
 SOURCE_TABLE_ID INTEGER,
 UNION_ALL_FLAG INTEGER,
 IS_DISTINCT INTEGER,
 REF_SQUID_ID INTEGER,
 SPLIT_COL VARCHAR(128),
 COLSPLIT_NUMUMN INTEGER DEFAULT 0,
 SPLIT_NUM INTEGER DEFAULT 0,
 WINDOW_DURATION BIGINT,
 ENABLE_WINDOW CHARACTER(1),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10273_10274 ON DS_DATA_SQUID (ID ASC);
CREATE INDEX IDX_DATA_SQUID_SOURCE_TABLE_ID ON DS_DATA_SQUID (SOURCE_TABLE_ID ASC);
CREATE INDEX IDX_DATA_SQUID_TABLE_NAME ON DS_DATA_SQUID (TABLE_NAME ASC);
CREATE INDEX SYS_IDX_10592 ON DS_DATA_SQUID (ID ASC);
ALTER TABLE DS_DATA_SQUID ADD CONSTRAINT FK_EXTRACT_SQUID_ID FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_DEST_ES_SQUID;
CREATE TABLE DS_DEST_ES_SQUID
(ID INTEGER NOT NULL AUTO_INCREMENT,
 IP VARCHAR(20),
 PORT INTEGER,
 ESINDEX VARCHAR(200),
 ESTYPE VARCHAR(200),
  PRIMARY KEY (ID));


drop table if exists DS_DEST_WEBSERVICE;
CREATE TABLE DS_DEST_WEBSERVICE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 SERVICE_NAME VARCHAR(100),
 WSDL VARCHAR(200),
 IS_REALTIME CHARACTER(1),
 CALLBACK_URL VARCHAR(200),
 ALLOWED_SERVICES VARCHAR(200),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10537_10538 ON DS_DEST_WEBSERVICE (ID ASC);


drop table if exists DS_DM_SQUID;
CREATE TABLE DS_DM_SQUID
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TRAINING_PERCENTAGE DOUBLE(64,0),
 VERSIONING INTEGER,
 MIN_BATCH_FRACTION DOUBLE(64,0),
 ITERATION_NUMBER INTEGER,
 STEP_SIZE DOUBLE(64,0),
 SMOOTHING_PARAMETER DOUBLE(64,0),
 REGULARIZATION DOUBLE(64,0),
 K INTEGER,
 PARALLEL_RUNS INTEGER,
 INITIALIZATION_MODE INTEGER,
 IMPLICIT_PREFERENCES INTEGER,
 CASE_SENSITIVE INTEGER,
 MIN_VALUE DOUBLE(64,0),
 MAX_VALUE DOUBLE(64,0),
 BUCKET_COUNT INTEGER,
 SEED INTEGER,
 ALGORITHM INTEGER,
 MAX_DEPTH INTEGER,
 IMPURITY INTEGER,
 MAX_BINS INTEGER,
 CATEGORICAL_SQUID INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10503_10504 ON DS_DM_SQUID (ID ASC);
CREATE INDEX SYS_IDX_10506 ON DS_DM_SQUID (ID ASC);
ALTER TABLE DS_DM_SQUID ADD CONSTRAINT FK_DM_SQUID_ID FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_DOC_EXTRACT;
CREATE TABLE DS_DOC_EXTRACT
(ID INTEGER NOT NULL AUTO_INCREMENT,
 IS_PERSISTED CHARACTER(1),
 TABLE_NAME VARCHAR(500),
 DESTINATION_SQUID_ID INTEGER,
 IS_INDEXED CHARACTER(1),
 TOP_N INTEGER,
 TRUNCATE_EXISTING_DATA_FLAG INTEGER,
 PROCESS_MODE INTEGER,
 CDC INTEGER,
 EXCEPTION_HANDLING_FLAG INTEGER,
 DOC_FORMAT INTEGER,
 ROW_FORMAT INTEGER,
 DELIMITER VARCHAR(10),
 FIELD_LENGTH INTEGER,
 HEADER_ROW_NO INTEGER,
 FIRST_DATA_ROW_NO INTEGER,
 ROW_DELIMITER VARCHAR(500),
 ROW_DELIMITER_POSITION INTEGER,
 SKIP_ROWS INTEGER,
 POST_PROCESS INTEGER,
 SOURCE_TABLE_ID INTEGER,
 UNION_ALL_FLAG INTEGER,
 COMPRESSICON_CODEC INTEGER DEFAULT 0,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10277_10278 ON DS_DOC_EXTRACT (ID ASC);
CREATE INDEX IDX_DOC_EXTRACT_SOURCE_TABLE_ID ON DS_DOC_EXTRACT (SOURCE_TABLE_ID ASC);
CREATE INDEX IDX_DOC_EXTRACT_TABLE_NAME ON DS_DOC_EXTRACT (TABLE_NAME ASC);
CREATE INDEX SYS_IDX_10595 ON DS_DOC_EXTRACT (ID ASC);
ALTER TABLE DS_DOC_EXTRACT ADD CONSTRAINT FK_REFERENCE_29 FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_ES_COLUMN;
CREATE TABLE DS_ES_COLUMN
(ID INTEGER NOT NULL AUTO_INCREMENT,
 COLUMN_ID INTEGER NOT NULL,
 SQUID_ID INTEGER NOT NULL,
 IS_MAPPING_ID INTEGER,
 FIELD_NAME VARCHAR(200),
 IS_PERSIST INTEGER,
  PRIMARY KEY (ID));


drop table if exists DS_FILEFOLDER_CONNECTION;
CREATE TABLE DS_FILEFOLDER_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 HOST VARCHAR(15),
 PORT VARCHAR(10),
 USER_NAME VARCHAR(100),
 PASSWORD VARCHAR(100),
 FILE_PATH VARCHAR(500),
 INCLUDING_SUBFOLDERS_FLAG INTEGER,
 UNIONALL_FLAG INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10281_10282 ON DS_FILEFOLDER_CONNECTION (ID ASC);
CREATE INDEX SYS_IDX_10598 ON DS_FILEFOLDER_CONNECTION (ID ASC);
ALTER TABLE DS_FILEFOLDER_CONNECTION ADD CONSTRAINT FK_REFERENCE_24 FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_FTP_CONNECTION;
CREATE TABLE DS_FTP_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 HOST VARCHAR(15),
 PORT VARCHAR(10),
 USER_NAME VARCHAR(100),
 PASSWORD VARCHAR(100),
 FILE_PATH VARCHAR(500),
 INCLUDING_SUBFOLDERS_FLAG INTEGER,
 UNIONALL_FLAG INTEGER,
 POSTPROCESS INTEGER,
 PROTOCOL INTEGER,
 ENCRYPTION INTEGER,
 ALLOWANONYMOUS_FLAG INTEGER,
 MAXCONNECTIONS INTEGER,
 TRANSFERMODE_FLAG INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10285_10286 ON DS_FTP_CONNECTION (ID ASC);
CREATE INDEX SYS_IDX_10601 ON DS_FTP_CONNECTION (ID ASC);
ALTER TABLE DS_FTP_CONNECTION ADD CONSTRAINT FK_REFERENCE_26 FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_GIS_MAP_SQUID;
CREATE TABLE DS_GIS_MAP_SQUID
(ID INTEGER NOT NULL AUTO_INCREMENT,
 MAP_NAME VARCHAR(50),
 MAP_TEMPLATE TEXT,
 IS_SUPPORT_HISTORY BOOLEAN,
 MAX_HISTORY_COUNT INTEGER,
 IS_SEND_EMAIL BOOLEAN,
 EMAIL_RECEIVERS VARCHAR(500),
 EMAIL_TITLE VARCHAR(200),
 EMAIL_REPORT_FORMAT VARCHAR(10),
 CREATION_DATE TIMESTAMP,
 IS_REAL_TIME BOOLEAN,
 FOLDER_ID INTEGER,
 IS_PACKED BOOLEAN,
 IS_COMPRESSED BOOLEAN,
 IS_ENCRYPTED BOOLEAN,
 PASSWORD VARCHAR(10),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10525_10526 ON DS_GIS_MAP_SQUID (ID ASC);
CREATE INDEX SYS_IDX_10528 ON DS_GIS_MAP_SQUID (ID ASC);
ALTER TABLE DS_GIS_MAP_SQUID ADD CONSTRAINT FK_SQUID_ID_TEMP FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_HBASE_CONNECTION;
CREATE TABLE DS_HBASE_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 URL VARCHAR(200),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10572_10573 ON DS_HBASE_CONNECTION (ID ASC);


drop table if exists DS_HBASE_EXTRACT;
CREATE TABLE DS_HBASE_EXTRACT
(ID INTEGER NOT NULL AUTO_INCREMENT,
 IS_PERSISTED CHARACTER(1),
 TABLE_NAME VARCHAR(100),
 DESTINATION_SQUID_ID INTEGER,
 IS_INDEXED CHARACTER(1),
 TOP_N INTEGER,
 TRUNCATE_EXISTING_DATA_FLAG INTEGER,
 PROCESS_MODE INTEGER,
 CDC INTEGER,
 EXCEPTION_HANDLING_FLAG INTEGER,
 SOURCE_TABLE_ID INTEGER,
 FILTER_TYPE INTEGER,
 SCAN TEXT,
 CODE TEXT,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10576_10577 ON DS_HBASE_EXTRACT (ID ASC);


drop table if exists DS_HDFS_CONNECTION;
CREATE TABLE DS_HDFS_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 HOST VARCHAR(25),
 PORT VARCHAR(10),
 USER_NAME VARCHAR(100),
 PASSWORD VARCHAR(100),
 FILE_PATH VARCHAR(500),
 UNIONALL_FLAG INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10289_10290 ON DS_HDFS_CONNECTION (ID ASC);
CREATE INDEX SYS_IDX_10604 ON DS_HDFS_CONNECTION (ID ASC);
ALTER TABLE DS_HDFS_CONNECTION ADD CONSTRAINT FK_REFERENCE_25 FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_HTTP_CONNECTION;
CREATE TABLE DS_HTTP_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 HOST VARCHAR(30),
 PORT INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10517_10518 ON DS_HTTP_CONNECTION (ID ASC);


drop table if exists DS_INDEXES;
CREATE TABLE DS_INDEXES
(ID INTEGER NOT NULL AUTO_INCREMENT,
 SQUID_ID INTEGER NOT NULL,
 INDEX_NAME VARCHAR(100) NOT NULL,
 INDEX_TYPE INTEGER,
 COLUMN_ID10 INTEGER,
 COLUMN_ID9 INTEGER,
 COLUMN_ID8 INTEGER,
 COLUMN_ID7 INTEGER,
 COLUMN_ID6 INTEGER,
 COLUMN_ID5 INTEGER,
 COLUMN_ID4 INTEGER,
 COLUMN_ID3 INTEGER,
 COLUMN_ID2 INTEGER,
 COLUMN_ID1 INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10296_10301 ON DS_INDEXES (INDEX_NAME ASC, SQUID_ID ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10293_10297 ON DS_INDEXES (ID ASC);
CREATE INDEX IDX_INDEXES_SQUID_ID ON DS_INDEXES (SQUID_ID ASC);
CREATE INDEX SYS_IDX_10607 ON DS_INDEXES (SQUID_ID ASC);
ALTER TABLE DS_INDEXES ADD CONSTRAINT FK_REFERENCE_30 FOREIGN KEY (SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_JOIN;
CREATE TABLE DS_JOIN
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50) NOT NULL,
 TARGET_SQUID_ID INTEGER NOT NULL,
 JOINED_SQUID_ID INTEGER NOT NULL,
 PRIOR_JOIN_ID INTEGER NOT NULL,
 JOIN_TYPE_ID INTEGER NOT NULL,
 JOIN_CONDITION VARCHAR(500),
  PRIMARY KEY (ID));

drop table if exists DS_JOIN_TYPE;
CREATE TABLE DS_JOIN_TYPE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 CODE VARCHAR(50),
 DESCRIPTION VARCHAR(500),
  PRIMARY KEY (ID));
INSERT INTO DS_JOIN_TYPE (ID,CODE,DESCRIPTION)VALUES(0,0,'BASETABLE');
INSERT INTO DS_JOIN_TYPE (ID,CODE,DESCRIPTION)VALUES(1,1,'INNERJOIN');
INSERT INTO  DS_JOIN_TYPE (ID,CODE,DESCRIPTION)VALUES(2,2,'LEFTOUTERJOIN');
INSERT INTO  DS_JOIN_TYPE  (ID,CODE,DESCRIPTION)VALUES(3,3,'RIGHTOUTERJOIN');
INSERT INTO  DS_JOIN_TYPE  (ID,CODE,DESCRIPTION)VALUES(4,4,'FULLJOIN');
INSERT INTO  DS_JOIN_TYPE  (ID,CODE,DESCRIPTION)VALUES(5,5,'CROSSJOIN');
INSERT INTO  DS_JOIN_TYPE  (ID,CODE,DESCRIPTION)VALUES(6,6,'UNOIN');
INSERT INTO  DS_JOIN_TYPE  (ID,CODE,DESCRIPTION)VALUES(7,7,'UNOINALL');
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10317_10318 ON DS_JOIN_TYPE (ID ASC);

CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10303_10309 ON DS_JOIN (ID ASC);
CREATE INDEX IDX_JOIN_JOINED_ID ON DS_JOIN (JOINED_SQUID_ID ASC);
CREATE INDEX IDX_JOIN_TARGET_ID ON DS_JOIN (TARGET_SQUID_ID ASC);
CREATE INDEX IDX_JOIN_TYPE_ID ON DS_JOIN (JOIN_TYPE_ID ASC);
CREATE INDEX SYS_IDX_10612 ON DS_JOIN (JOINED_SQUID_ID ASC);
CREATE INDEX SYS_IDX_10620 ON DS_JOIN (JOIN_TYPE_ID ASC);
CREATE INDEX SYS_IDX_10628 ON DS_JOIN (TARGET_SQUID_ID ASC);
ALTER TABLE DS_JOIN ADD CONSTRAINT FK_JOIN_TYPE FOREIGN KEY (JOIN_TYPE_ID) REFERENCES DS_JOIN_TYPE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE DS_JOIN ADD CONSTRAINT FK_JOIN_SQUID_ID FOREIGN KEY (JOINED_SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE DS_JOIN ADD CONSTRAINT FK_TARGET_ID FOREIGN KEY (TARGET_SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

drop table if exists DS_KAFKA_CONNECTION;
CREATE TABLE DS_KAFKA_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 ZKQUORUM VARCHAR(200),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10564_10565 ON DS_KAFKA_CONNECTION (ID ASC);


drop table if exists DS_KAFKA_EXTRACT;
CREATE TABLE DS_KAFKA_EXTRACT
(ID INTEGER NOT NULL AUTO_INCREMENT,
 IS_PERSISTED CHARACTER(1),
 TABLE_NAME VARCHAR(100),
 DESTINATION_SQUID_ID INTEGER,
 NUMPARTITIONS INTEGER,
 GROUP_ID VARCHAR(100),
 SOURCE_TABLE_ID INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10568_10569 ON DS_KAFKA_EXTRACT (ID ASC);


drop table if exists DS_NO_SQL_CONNECTION;
CREATE TABLE DS_NO_SQL_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 DB_TYPE_ID INTEGER NOT NULL,
 HOST VARCHAR(100),
 PORT VARCHAR(10),
 USER_NAME VARCHAR(100),
 PASSWORD VARCHAR(100),
 DATABASE_NAME VARCHAR(100),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10374_10376 ON DS_NO_SQL_CONNECTION (ID ASC);


drop table if exists DS_PROJECT;
CREATE TABLE DS_PROJECT
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50),
 NAME VARCHAR(50),
 REPOSITORY_ID INTEGER NOT NULL,
 DESCRIPTION VARCHAR(200),
 CREATION_DATE TIMESTAMP,
 MODIFICATION_DATE datetime,
 CREATOR VARCHAR(50),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10323_10327 ON DS_PROJECT (NAME ASC, REPOSITORY_ID ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10321_10324 ON DS_PROJECT (ID ASC);


drop table if exists DS_REFERENCE_COLUMN;
CREATE TABLE DS_REFERENCE_COLUMN
(COLUMN_ID INTEGER NOT NULL,
 RELATIVE_ORDER SMALLINT,
 REFERENCE_SQUID_ID INTEGER NOT NULL,
 NAME VARCHAR(100),
 DATA_TYPE INTEGER,
 COLLATION INTEGER,
 NULLABLE CHARACTER(1),
 LENGTH INTEGER,
 `PRECISION` INTEGER,
 SCALE INTEGER,
 DESCRIPTION VARCHAR(500),
 ISUNIQUE CHARACTER(1),
 ISPK CHARACTER(1),
 CDC INTEGER,
 IS_BUSINESS_KEY INTEGER,
 HOST_SQUID_ID INTEGER,
 IS_REFERENCED CHARACTER(1),
 GROUP_ID INTEGER);

drop table if exists DS_REFERENCE_COLUMN_GROUP;
CREATE TABLE DS_REFERENCE_COLUMN_GROUP
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50) NOT NULL,
 REFERENCE_SQUID_ID INTEGER NOT NULL,
 RELATIVE_ORDER SMALLINT,
  PRIMARY KEY (ID));
CREATE INDEX IDX_REFCOLUMN ON DS_REFERENCE_COLUMN (COLUMN_ID ASC);
CREATE INDEX IDX_REFCOLUMN_GROUP_ID ON DS_REFERENCE_COLUMN (GROUP_ID ASC);
CREATE INDEX IDX_REFCOLUMN_HOST_ID ON DS_REFERENCE_COLUMN (HOST_SQUID_ID ASC);
CREATE INDEX SYS_IDX_10636 ON DS_REFERENCE_COLUMN (GROUP_ID ASC);
CREATE INDEX SYS_IDX_10640 ON DS_REFERENCE_COLUMN (HOST_SQUID_ID ASC);
ALTER TABLE DS_REFERENCE_COLUMN ADD CONSTRAINT FK_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES DS_REFERENCE_COLUMN_GROUP (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE DS_REFERENCE_COLUMN ADD CONSTRAINT FK_HOST_SQUID_ID FOREIGN KEY (HOST_SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10334_10337 ON DS_REFERENCE_COLUMN_GROUP (ID ASC);
CREATE INDEX IDX_GROUP_SQUID_ID ON DS_REFERENCE_COLUMN_GROUP (REFERENCE_SQUID_ID ASC);
CREATE INDEX SYS_IDX_10644 ON DS_REFERENCE_COLUMN_GROUP (REFERENCE_SQUID_ID ASC);
ALTER TABLE DS_REFERENCE_COLUMN_GROUP ADD CONSTRAINT FK_REF_COLUMN_SQUID_ID FOREIGN KEY (REFERENCE_SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_REPORT_SQUID;
CREATE TABLE DS_REPORT_SQUID
(ID INTEGER NOT NULL AUTO_INCREMENT,
 REPORT_NAME VARCHAR(50),
 REPORT_TEMPLATE TEXT,
 IS_SUPPORT_HISTORY BOOLEAN,
 MAX_HISTORY_COUNT INTEGER,
 IS_SEND_EMAIL BOOLEAN,
 EMAIL_RECEIVERS VARCHAR(500),
 EMAIL_TITLE VARCHAR(200),
 EMAIL_REPORT_FORMAT VARCHAR(10),
 CREATION_DATE TIMESTAMP,
 IS_REAL_TIME BOOLEAN,
 FOLDER_ID INTEGER,
 IS_PACKED BOOLEAN,
 IS_COMPRESSED BOOLEAN,
 IS_ENCRYPTED BOOLEAN,
 PASSWORD VARCHAR(10),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10342_10343 ON DS_REPORT_SQUID (ID ASC);
CREATE INDEX SYS_IDX_10649 ON DS_REPORT_SQUID (ID ASC);
ALTER TABLE DS_REPORT_SQUID ADD CONSTRAINT FK_REFERENCE_23 FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_REPORT_VERSION;
CREATE TABLE DS_REPORT_VERSION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 SQUID_ID INTEGER NOT NULL,
 VERSION INTEGER,
 TEMPLATE TEXT,
 ADD_DATE TIMESTAMP NOT NULL,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10545_10548 ON DS_REPORT_VERSION (ID ASC);


drop table if exists DS_SOURCE_COLUMN;
CREATE TABLE DS_SOURCE_COLUMN
(ID INTEGER NOT NULL AUTO_INCREMENT,
 SOURCE_TABLE_ID INTEGER NOT NULL,
 NAME VARCHAR(128) NOT NULL,
 DATA_TYPE INTEGER NOT NULL,
 NULLABLE CHARACTER(1),
 LENGTH INTEGER,
 `PRECISION` INTEGER,
 SCALE INTEGER,
 RELATIVE_ORDER SMALLINT,
 ISUNIQUE CHARACTER(1),
 ISPK CHARACTER(1),
 `COLLATION` INTEGER,
  PRIMARY KEY (ID));

drop table if exists DS_SOURCE_TABLE;
CREATE TABLE DS_SOURCE_TABLE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TABLE_NAME VARCHAR(300) NOT NULL,
 SOURCE_SQUID_ID INTEGER NOT NULL,
 IS_EXTRACTED CHARACTER(1),
 RELATIVE_ORDER SMALLINT,
 URL VARCHAR(300),
 URL_PARAMS VARCHAR(300),
 HEADER_PARAMS VARCHAR(3000),
 `METHOD` INTEGER,
 IS_DIRECTORY BOOLEAN DEFAULT FALSE,
  PRIMARY KEY (ID));

CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10350_10356 ON DS_SOURCE_COLUMN (SOURCE_TABLE_ID ASC, NAME ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10346_10351 ON DS_SOURCE_COLUMN (ID ASC);
CREATE INDEX IDX_SROUCE_COLUMN_NAME ON DS_SOURCE_COLUMN (NAME ASC);
CREATE INDEX IDX_SROUCE_COLUMN_TABLE_ID ON DS_SOURCE_COLUMN (SOURCE_TABLE_ID ASC);
CREATE INDEX SYS_IDX_10652 ON DS_SOURCE_COLUMN (SOURCE_TABLE_ID ASC);
ALTER TABLE DS_SOURCE_COLUMN ADD CONSTRAINT FK_SOURCE_TABLE_ID FOREIGN KEY (SOURCE_TABLE_ID) REFERENCES DS_SOURCE_TABLE (ID) ON UPDATE NO ACTION ON DELETE CASCADE;

CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10361_10366 ON DS_SOURCE_TABLE (TABLE_NAME ASC, SOURCE_SQUID_ID ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10358_10362 ON DS_SOURCE_TABLE (ID ASC);
CREATE INDEX IDX_SROUCE_TABLE_NAME ON DS_SOURCE_TABLE (TABLE_NAME ASC);
CREATE INDEX IDX_SROUCE_TABLE_SQUID_ID ON DS_SOURCE_TABLE (SOURCE_SQUID_ID ASC);
CREATE INDEX SYS_IDX_10658 ON DS_SOURCE_TABLE (SOURCE_SQUID_ID ASC);
ALTER TABLE DS_SOURCE_TABLE ADD CONSTRAINT FK_SOURCE_SQUID_ID FOREIGN KEY (SOURCE_SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_SQL_CONNECTION;
CREATE TABLE DS_SQL_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 DB_TYPE_ID INTEGER NOT NULL,
 HOST VARCHAR(100),
 PORT VARCHAR(10),
 USER_NAME VARCHAR(100),
 PASSWORD VARCHAR(100),
 DATABASE_NAME VARCHAR(100),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10368_10370 ON DS_SQL_CONNECTION (ID ASC);
CREATE INDEX SYS_IDX_10663 ON DS_SQL_CONNECTION (ID ASC);
ALTER TABLE DS_SQL_CONNECTION ADD CONSTRAINT FK_DB_SQUID_ID FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10405_10410 ON DS_SQUID_FLOW (NAME ASC, PROJECT_ID ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10402_10406 ON DS_SQUID_FLOW (ID ASC);
CREATE INDEX IDX_SQUIDFLOW_PROJECT_ID ON DS_SQUID_FLOW (PROJECT_ID ASC);
CREATE INDEX SYS_IDX_10411 ON DS_SQUID_FLOW (PROJECT_ID ASC);
ALTER TABLE DS_SQUID_FLOW ADD CONSTRAINT FK_PROJECT_ID FOREIGN KEY (PROJECT_ID) REFERENCES DS_PROJECT (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_SQUID_LINK;
CREATE TABLE DS_SQUID_LINK
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50),
 SQUID_FLOW_ID INTEGER,
 FROM_SQUID_ID INTEGER NOT NULL,
 TO_SQUID_ID INTEGER NOT NULL,
 END_X INTEGER,
 ARROWS_STYLE INTEGER,
 END_Y INTEGER,
 ENDMIDDLE_X INTEGER,
 ENDMIDDLE_Y INTEGER,
 START_X INTEGER,
 START_Y INTEGER,
 STARTMIDDLE_X INTEGER,
 STARTMIDDLE_Y INTEGER,
 LINE_COLOR VARCHAR(50),
 LINE_TYPE INTEGER,
 LINK_TYPE INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10417_10422 ON DS_SQUID_LINK (FROM_SQUID_ID ASC, TO_SQUID_ID ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10414_10418 ON DS_SQUID_LINK (ID ASC);
CREATE INDEX IDX_SQUID_LINK_FROM_ID ON DS_SQUID_LINK (FROM_SQUID_ID ASC);
CREATE INDEX IDX_SQUID_LINK_TO_ID ON DS_SQUID_LINK (TO_SQUID_ID ASC);
CREATE INDEX SYS_IDX_10423 ON DS_SQUID_LINK (FROM_SQUID_ID ASC);
ALTER TABLE DS_SQUID_LINK ADD CONSTRAINT FK_LINK_SQUID_ID FOREIGN KEY (FROM_SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10427_10430 ON DS_SQUID_TYPE (CODE ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10426_10428 ON DS_SQUID_TYPE (ID ASC);


drop table if exists DS_START_SQUID_FLOW_LOG;
CREATE TABLE DS_START_SQUID_FLOW_LOG
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TASK_ID VARCHAR(200),
 CALL_BACK_URL INTEGER,
 CREATE_DATE TIMESTAMP,
 CALL_BACK_DATE datetime,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10541_10542 ON DS_START_SQUID_FLOW_LOG (ID ASC);


drop table if exists DS_SYS_ACTION_HEADER;
CREATE TABLE DS_SYS_ACTION_HEADER
(ID INTEGER NOT NULL AUTO_INCREMENT,
 SYS_TABLE_NAME VARCHAR(50) NOT NULL,
 ACTION CHARACTER(1) NOT NULL,
 USER_ID INTEGER NOT NULL,
 IS_UNDONE CHARACTER(1) NOT NULL,
 ACTION_DATE TIMESTAMP NOT NULL,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10162_10168 ON DS_SYS_ACTION_HEADER (ID ASC);


drop table if exists DS_SYS_ACTION_LINE;
CREATE TABLE DS_SYS_ACTION_LINE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 HEADER_ID INTEGER,
 COLUMN_NAME VARCHAR(100) NOT NULL,
 CELL_VALUE TEXT,
  PRIMARY KEY (ID));


drop table if exists DS_SYS_APPLICATION_STATUS;
CREATE TABLE DS_SYS_APPLICATION_STATUS
(ID INTEGER NOT NULL AUTO_INCREMENT,
 REPOSITORY_ID INTEGER,
 PROJECT_ID INTEGER,
 SQUIDFLOW_ID INTEGER,
 LAUNCH_USER_ID INTEGER,
 STOP_USER_ID INTEGER,
 APPLICATION_ID VARCHAR(100),
 STATUS VARCHAR(20),
 CONFIG VARCHAR(500),
 CREATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
 UPDATE_DATE datetime,
 STOP_DATE datetime,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10580_10582 ON DS_SYS_APPLICATION_STATUS (ID ASC);


drop table if exists DS_SYS_DATATYPE_MAPPING;
CREATE TABLE DS_SYS_DATATYPE_MAPPING
(ID INTEGER NOT NULL AUTO_INCREMENT,
 DATABASE_TYPE VARCHAR(128) NOT NULL,
 SOURCE_DATATYPE VARCHAR(128) NOT NULL,
 SYSTEM_DATATYPE VARCHAR(128) NOT NULL,
 RESTORE_PRIORITY TINYINT,
 `PRECISION` BIGINT,
 SCALE SMALLINT,
 CREATE_PARAM_COUNT TINYINT,
 DESCRIPTION VARCHAR(500),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10189_10193 ON DS_SYS_DATATYPE_MAPPING (ID ASC);


drop table if exists DS_SYS_ENTITY_TYPE;
CREATE TABLE DS_SYS_ENTITY_TYPE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 NAME VARCHAR(50) NOT NULL,
 DESCRIPTION VARCHAR(500),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10157_10159 ON DS_SYS_ENTITY_TYPE (ID ASC);


drop table if exists DS_SYS_GROUP;
CREATE TABLE DS_SYS_GROUP
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50),
 TEAM_ID INTEGER NOT NULL,
 PARENT_GROUP_ID INTEGER,
 NAME VARCHAR(128) NOT NULL,
 DESCRIPTION VARCHAR(500),
 LOCATION_X INTEGER,
 LOCATION_Y INTEGER,
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10120_10123 ON DS_SYS_GROUP (ID ASC);
CREATE UNIQUE INDEX SYS_IDX_UNIQUE_GROUP_NAME_IN_TEAM_10127 ON DS_SYS_GROUP (NAME ASC, TEAM_ID ASC);
CREATE INDEX SYS_IDX_10128 ON DS_SYS_GROUP (TEAM_ID ASC);
ALTER TABLE DS_SYS_GROUP ADD CONSTRAINT FK_GROUP_TEAM_ID FOREIGN KEY (TEAM_ID) REFERENCES DS_SYS_TEAM (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_SYS_JOB_SCHEDULE;
CREATE TABLE DS_SYS_JOB_SCHEDULE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 OBJECT_TYPE INTEGER,
 TEAM_ID INTEGER,
 REPOSITORY_ID INTEGER,
 PROJECT_ID INTEGER,
 PROJECT_NAME VARCHAR(100),
 SQUID_FLOW_ID INTEGER,
 SQUID_FLOW_NAME VARCHAR(100),
 SQUID_ID INTEGER,
 SCHEDULE_TYPE VARCHAR(50),
 SCHEDULE_BEGIN_DATE DATETIME,
 SCHEDULE_END_DATE DATETIME,
 SCHEDULE_VALID INTEGER,
 DAY_DELY INTEGER,
 DAY_RUN_COUNT INTEGER,
 DAY_BEGIN_DATE TIME,
 DAY_END_DATE TIME,
 DAY_RUN_DELY INTEGER,
 DAY_ONCE_OFF_TIME TIME,
 WEEK_DAY INTEGER,
 WEEK_BEGIN_DATE TIME,
 MONTH_DAY INTEGER,
 MONTH_BEGIN_DATE TIME,
 LAST_SCHEDULED_DATE DATETIME,
 CREATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
 STATUS CHARACTER(1),
 ENABLE_EMAIL_SENDING INTEGER,
 EMAIL_ADDRESS VARCHAR(500),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10231_10232 ON DS_SYS_JOB_SCHEDULE (ID ASC);


drop table if exists DS_SYS_METADATA_NODE;
CREATE TABLE DS_SYS_METADATA_NODE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 PARENT_ID INTEGER,
 NODE_TYPE INTEGER,
 NODE_NAME VARCHAR(100),
 ORDER_NUMBER INTEGER,
 NODE_DESC VARCHAR(200),
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10221_10222 ON DS_SYS_METADATA_NODE (ID ASC);


drop table if exists DS_SYS_METADATA_NODE_ATTR;
CREATE TABLE DS_SYS_METADATA_NODE_ATTR
(ID INTEGER NOT NULL AUTO_INCREMENT,
 ATTR_NAME VARCHAR(100),
 ATTR_VALUE VARCHAR(500),
 NODE_ID INTEGER,
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10225_10226 ON DS_SYS_METADATA_NODE_ATTR (ID ASC);
CREATE INDEX SYS_IDX_10228 ON DS_SYS_METADATA_NODE_ATTR (NODE_ID ASC);
ALTER TABLE DS_SYS_METADATA_NODE_ATTR ADD CONSTRAINT FK_REFERENCE_10 FOREIGN KEY (NODE_ID) REFERENCES DS_SYS_METADATA_NODE (ID) ON UPDATE NO ACTION ON DELETE CASCADE;



drop table if exists DS_SYS_PRIVILEGE;
CREATE TABLE DS_SYS_PRIVILEGE
(PARTY_ID INTEGER,
 PARTY_TYPE CHARACTER(1),
 ENTITY_TYPE_ID INTEGER,
 CAN_VIEW CHARACTER(1),
 CAN_CREATE CHARACTER(1),
 CAN_UPDATE CHARACTER(1),
 CAN_DELETE CHARACTER(1));


drop table if exists DS_SYS_REPORT_FOLDER;
CREATE TABLE DS_SYS_REPORT_FOLDER
(ID INTEGER NOT NULL AUTO_INCREMENT,
 FOLDER_NAME VARCHAR(50),
 CREATION_DATE TIMESTAMP,
 PID INTEGER,
 IS_DISPLAY BOOLEAN,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10209_10210 ON DS_SYS_REPORT_FOLDER (ID ASC);
CREATE INDEX IDX_REPORT_FOLDER_PID ON DS_SYS_REPORT_FOLDER (PID ASC);
ALTER TABLE DS_SYS_REPORT_FOLDER ADD CONSTRAINT FK_PID FOREIGN KEY (PID) REFERENCES DS_SYS_REPORT_FOLDER (ID) ON UPDATE NO ACTION ON DELETE CASCADE;


drop table if exists DS_SYS_REPORT_FOLDER_MAPPING;
CREATE TABLE DS_SYS_REPORT_FOLDER_MAPPING
(ID INTEGER NOT NULL AUTO_INCREMENT,
 REPOSITORY_ID INTEGER,
 SQUID_ID INTEGER,
 FOLDER_ID INTEGER,
 REPORT_NAME VARCHAR(50),
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10215_10216 ON DS_SYS_REPORT_FOLDER_MAPPING (ID ASC);
CREATE INDEX IDX_MAPPING_FOLDER_ID ON DS_SYS_REPORT_FOLDER_MAPPING (FOLDER_ID ASC);
CREATE INDEX SYS_IDX_10218 ON DS_SYS_REPORT_FOLDER_MAPPING (FOLDER_ID ASC);
ALTER TABLE DS_SYS_REPORT_FOLDER_MAPPING ADD CONSTRAINT FK_FOLDER_ID FOREIGN KEY (FOLDER_ID) REFERENCES DS_SYS_REPORT_FOLDER (ID) ON UPDATE NO ACTION ON DELETE CASCADE;



drop table if exists DS_SYS_REPOSITORY;
CREATE TABLE DS_SYS_REPOSITORY
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TEAM_ID INTEGER NOT NULL,
 `KEY` VARCHAR(50),
 NAME VARCHAR(100) NOT NULL,
 DESCRIPTION VARCHAR(500),
 REPOSITORY_DB_NAME VARCHAR(100) NOT NULL,
 TYPE INTEGER,
 STATUS_ID INTEGER NOT NULL,
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10099_10104 ON DS_SYS_REPOSITORY (ID ASC);
CREATE UNIQUE INDEX SYS_IDX_UNIQUE_REPOSITORY_NAME_IN_TEAM_10110 ON DS_SYS_REPOSITORY (TEAM_ID ASC, NAME ASC);
CREATE INDEX SYS_IDX_10111 ON DS_SYS_REPOSITORY (TEAM_ID ASC);

drop table if exists DS_SYS_REPOSITORY_STATUS;
CREATE TABLE DS_SYS_REPOSITORY_STATUS
(ID INTEGER NOT NULL AUTO_INCREMENT,
 NAME VARCHAR(100) NOT NULL,
 DESCRIPTION VARCHAR(500),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10114_10116 ON DS_SYS_REPOSITORY_STATUS (ID ASC);


drop table if exists DS_SYS_ROLE;
CREATE TABLE DS_SYS_ROLE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50) NOT NULL,
 GROUP_ID INTEGER,
 NAME VARCHAR(100) NOT NULL,
 DESCRIPTION VARCHAR(500),
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10131_10134 ON DS_SYS_ROLE (ID ASC);
CREATE UNIQUE INDEX SYS_IDX_UNIQUE_ROLE_NAME_IN_GROUP_10138 ON DS_SYS_ROLE (NAME ASC, GROUP_ID ASC);
CREATE INDEX SYS_IDX_10139 ON DS_SYS_ROLE (GROUP_ID ASC);
ALTER TABLE DS_SYS_ROLE ADD CONSTRAINT FK_ROLE_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES DS_SYS_GROUP (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_SYS_SERVER_PARAMETER;
CREATE TABLE DS_SYS_SERVER_PARAMETER
(ID INTEGER NOT NULL AUTO_INCREMENT,
 NAME VARCHAR(128),
 `VALUE` VARCHAR(256),
 DATA_TYPE CHARACTER(1) NOT NULL,
 IS_COLLECTION CHARACTER(1) NOT NULL,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10181_10184 ON DS_SYS_SERVER_PARAMETER (ID ASC);



drop table if exists DS_SYS_SF_JOB_HISTORY;
CREATE TABLE DS_SYS_SF_JOB_HISTORY
(TASK_ID VARCHAR(40) NOT NULL,
 REPOSITORY_ID INTEGER,
 SQUID_FLOW_ID INTEGER,
 JOB_ID INTEGER,
 STATUS INTEGER,
 DEBUG_SQUIDS VARCHAR(500),
 DESTINATION_SQUIDS VARCHAR(500),
 CALLER VARCHAR(10),
 CREATE_TIME TIMESTAMP,
 UPDATE_TIME datetime,
  PRIMARY KEY (TASK_ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10235_10236 ON DS_SYS_SF_JOB_HISTORY (TASK_ID ASC);
CREATE INDEX IDX_JOB_HISTORY_JOB_ID ON DS_SYS_SF_JOB_HISTORY (JOB_ID ASC);
CREATE INDEX SYS_IDX_10238 ON DS_SYS_SF_JOB_HISTORY (JOB_ID ASC);
ALTER TABLE DS_SYS_SF_JOB_HISTORY ADD CONSTRAINT FK_JOB_ID FOREIGN KEY (JOB_ID) REFERENCES DS_SYS_JOB_SCHEDULE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_SYS_SF_JOB_MODULE_LOG;
CREATE TABLE DS_SYS_SF_JOB_MODULE_LOG
(TASK_ID VARCHAR(40) NOT NULL,
 SQUID_ID INTEGER NOT NULL,
 STATUS INTEGER,
 CREATE_TIME TIMESTAMP,
 UPDATE_TIME datetime,
  PRIMARY KEY (TASK_ID, SQUID_ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10242_10243 ON DS_SYS_SF_JOB_MODULE_LOG (TASK_ID ASC, SQUID_ID ASC);
CREATE INDEX SYS_IDX_10246 ON DS_SYS_SF_JOB_MODULE_LOG (TASK_ID ASC);
ALTER TABLE DS_SYS_SF_JOB_MODULE_LOG ADD CONSTRAINT FK_TASK_ID FOREIGN KEY (TASK_ID) REFERENCES DS_SYS_SF_JOB_HISTORY (TASK_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;


drop table if exists DS_SYS_SF_LOG;
CREATE TABLE DS_SYS_SF_LOG
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TASK_ID VARCHAR(36) NOT NULL,
 MESSAGE VARCHAR(500),
 CREATE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
 LOG_LEVEL INTEGER,
 SQUID_ID INTEGER,
 TSQUID_ID VARCHAR(40),
 TSQUID_TYPE INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10249_10251 ON DS_SYS_SF_LOG (ID ASC);
CREATE INDEX SYS_IDX_10254 ON DS_SYS_SF_LOG (TASK_ID ASC);
ALTER TABLE DS_SYS_SF_LOG ADD CONSTRAINT FK_SF_TASK_ID FOREIGN KEY (TASK_ID) REFERENCES DS_SYS_SF_JOB_HISTORY (TASK_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_SYS_SQUID_FLOW_STATUS;
CREATE TABLE DS_SYS_SQUID_FLOW_STATUS
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TEAM_ID INTEGER,
 REPOSITORY_ID INTEGER,
 PROJECT_ID INTEGER,
 SQUID_FLOW_ID INTEGER,
 STATUS INTEGER,
 OWNER_CLIENT_TOKEN VARCHAR(50),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10257_10258 ON DS_SYS_SQUID_FLOW_STATUS (ID ASC);
CREATE INDEX IDX_STATUS_PROJECT_ID ON DS_SYS_SQUID_FLOW_STATUS (PROJECT_ID ASC);
CREATE INDEX IDX_STATUS_REPOSITORY_ID ON DS_SYS_SQUID_FLOW_STATUS (REPOSITORY_ID ASC);
CREATE INDEX IDX_STATUS_SQUID_FLOW_ID ON DS_SYS_SQUID_FLOW_STATUS (SQUID_FLOW_ID ASC);

CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10092_10094 ON DS_SYS_TEAM (ID ASC);
CREATE UNIQUE INDEX SYS_IDX_UNIQUE_TEAM_NAME_10097 ON DS_SYS_TEAM (NAME ASC);


drop table if exists DS_SYS_TEMPLATE_DATA;
CREATE TABLE DS_SYS_TEMPLATE_DATA
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TYPE_ID INTEGER,
 DATA_VALUE VARCHAR(500),
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10203_10204 ON DS_SYS_TEMPLATE_DATA (ID ASC);
CREATE INDEX SYS_IDX_10206 ON DS_SYS_TEMPLATE_DATA (TYPE_ID ASC);


drop table if exists DS_SYS_TEMPLATE_TYPE;
CREATE TABLE DS_SYS_TEMPLATE_TYPE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TYPE_NAME VARCHAR(50),
 DATA_TYPE INTEGER,
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10199_10200 ON DS_SYS_TEMPLATE_TYPE (ID ASC);
ALTER TABLE DS_SYS_TEMPLATE_DATA ADD CONSTRAINT FK_TEMPLATE_FOR_TYPE_ID FOREIGN KEY (TYPE_ID) REFERENCES DS_SYS_TEMPLATE_TYPE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

drop table if exists DS_SYS_USER;
CREATE TABLE DS_SYS_USER
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50) NOT NULL,
 ROLE_ID INTEGER,
 USER_NAME VARCHAR(50) NOT NULL,
 PASSWORD VARCHAR(50),
 FULL_NAME VARCHAR(20),
 EMAIL_ADDRESS VARCHAR(100),
 STATUS_ID INTEGER,
 IS_ACTIVE CHARACTER(1),
 LAST_LOGON_DATE datetime,
 CREATION_DATE TIMESTAMP,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10142_10145 ON DS_SYS_USER (ID ASC);
CREATE UNIQUE INDEX SYS_IDX_UNIQUE_USER_NAME_10149 ON DS_SYS_USER (USER_NAME ASC);
CREATE INDEX SYS_IDX_10150 ON DS_SYS_USER (ROLE_ID ASC);
ALTER TABLE DS_SYS_USER ADD CONSTRAINT FK_USER_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES DS_SYS_ROLE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_SYS_USER_STATUS;
CREATE TABLE DS_SYS_USER_STATUS
(ID INTEGER NOT NULL AUTO_INCREMENT,
 NAME VARCHAR(100),
 DESCRIPTION VARCHAR(500),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10153_10154 ON DS_SYS_USER_STATUS (ID ASC);



drop table if exists DS_THIRDPARTY_PARAMS;
CREATE TABLE DS_THIRDPARTY_PARAMS
(ID INTEGER NOT NULL AUTO_INCREMENT,
 SQUID_ID INTEGER,
 SOURCE_TABLE_ID INTEGER,
 NAME VARCHAR(200),
 PARAMS_TYPE INTEGER,
 VALUE_TYPE INTEGER,
 VAL VARCHAR(200),
 COLUMN_ID INTEGER,
 REF_SQUID_ID INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10521_10522 ON DS_THIRDPARTY_PARAMS (ID ASC);



drop table if exists DS_TRAN_INPUT_DEFINITION;
CREATE TABLE DS_TRAN_INPUT_DEFINITION
(CODE VARCHAR(50) NOT NULL,
 INPUT_ORDER INTEGER NOT NULL,
 INPUT_DATA_TYPE INTEGER NOT NULL,
 DESCRIPTION VARCHAR(500));
CREATE INDEX IDX_TRAN_INPUT_DEFINITION_CODE ON DS_TRAN_INPUT_DEFINITION (CODE ASC);
CREATE INDEX SYS_IDX_10484 ON DS_TRAN_INPUT_DEFINITION (CODE ASC);

drop table if exists DS_TRANSFORMATION_TYPE;
CREATE TABLE DS_TRANSFORMATION_TYPE
(ID INTEGER NOT NULL,
 CODE VARCHAR(50) NOT NULL,
 OUTPUT_DATA_TYPE INTEGER,
 DESCRIPTION VARCHAR(500),
  PRIMARY KEY (ID));

drop table if exists DS_TRAN_INPUTS;
CREATE TABLE DS_TRAN_INPUTS
(ID INTEGER NOT NULL AUTO_INCREMENT,
 TRANSFORMATION_ID INTEGER NOT NULL,
 RELATIVE_ORDER INTEGER NOT NULL,
 SOURCE_TRANSFORM_ID INTEGER,
 SOURCE_TRAN_OUTPUT_INDEX INTEGER,
 IN_CONDITION VARCHAR(1000),
  PRIMARY KEY (ID));

drop table if exists DS_TRANSFORMATION;
CREATE TABLE DS_TRANSFORMATION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50) NOT NULL,
 SQUID_ID INTEGER NOT NULL,
 TRANSFORMATION_TYPE_ID INTEGER NOT NULL,
 LOCATION_X INTEGER,
 LOCATION_Y INTEGER,
 COLUMN_ID INTEGER,
 DESCRIPTION VARCHAR(500),
 NAME VARCHAR(100),
 OUTPUT_DATA_TYPE INTEGER,
 CONSTANT_VALUE VARCHAR(4000),
 REG_EXPRESSION VARCHAR(500),
 TERM_INDEX VARCHAR(100),
 OUTPUT_NUMBER INTEGER,
 DELIMITER VARCHAR(2000),
 ALGORITHM INTEGER,
 TRAN_CONDITION VARCHAR(500),
 LENGTH VARCHAR(100),
 START_POSITION VARCHAR(100),
 DIFFERENCE_TYPE INTEGER,
 POWER VARCHAR(100),
 MODULUS VARCHAR(100),
 REPLICA_COUNT VARCHAR(100),
 IS_USING_DICTIONARY INTEGER,
 DICTIONARY_SQUID_ID INTEGER,
 BUCKET_COUNT INTEGER,
 MODEL_SQUID_ID INTEGER,
 MODEL_VERSION INTEGER,
 OPERATOR INTEGER,
 DATE_FORMAT VARCHAR(100),
 INC_UNIT INTEGER,
 SPLIT_TYPE INTEGER,
  PRIMARY KEY (ID));

drop table if exists DS_TRANSFORMATION_LINK;
CREATE TABLE DS_TRANSFORMATION_LINK
(ID INTEGER NOT NULL AUTO_INCREMENT,
 `KEY` VARCHAR(50) NOT NULL,
 FROM_TRANSFORMATION_ID INTEGER NOT NULL,
 TO_TRANSFORMATION_ID INTEGER NOT NULL,
 IN_ORDER INTEGER,
  PRIMARY KEY (ID));

CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10466_10469 ON DS_TRAN_INPUTS (ID ASC);
CREATE INDEX IDX_TRANS_ID ON DS_TRAN_INPUTS (TRANSFORMATION_ID ASC);
CREATE INDEX IDX_TRANS_SOURCE_ID ON DS_TRAN_INPUTS (SOURCE_TRANSFORM_ID ASC);
CREATE INDEX SYS_IDX_10473 ON DS_TRAN_INPUTS (TRANSFORMATION_ID ASC);
CREATE INDEX SYS_IDX_10475 ON DS_TRAN_INPUTS (SOURCE_TRANSFORM_ID ASC);
ALTER TABLE DS_TRAN_INPUTS ADD CONSTRAINT FK_REFERENCE_31 FOREIGN KEY (TRANSFORMATION_ID) REFERENCES DS_TRANSFORMATION (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE DS_TRAN_INPUTS ADD CONSTRAINT FK_REFERENCE_32 FOREIGN KEY (SOURCE_TRANSFORM_ID) REFERENCES DS_TRANSFORMATION (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10432_10436 ON DS_TRANSFORMATION (ID ASC);
CREATE INDEX IDX_TRANSFORMATION_SQUID_ID ON DS_TRANSFORMATION (SQUID_ID ASC);
CREATE INDEX IDX_TRANSFORMATION_TYPE_ID ON DS_TRANSFORMATION (TRANSFORMATION_TYPE_ID ASC);
CREATE INDEX SYS_IDX_10441 ON DS_TRANSFORMATION (SQUID_ID ASC);
CREATE INDEX SYS_IDX_10689 ON DS_TRANSFORMATION (TRANSFORMATION_TYPE_ID ASC);
ALTER TABLE DS_TRANSFORMATION ADD CONSTRAINT FK_TRANS_SQUID_ID FOREIGN KEY (SQUID_ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE DS_TRANSFORMATION ADD CONSTRAINT FK_TRAN_TYPE FOREIGN KEY (TRANSFORMATION_TYPE_ID) REFERENCES DS_TRANSFORMATION_TYPE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10444_10448 ON DS_TRANSFORMATION_LINK (ID ASC);
CREATE INDEX IDX_TRANSFORMATION_LINK_FROM_ID ON DS_TRANSFORMATION_LINK (FROM_TRANSFORMATION_ID ASC);
CREATE INDEX IDX_TRANSFORMATION_LINK_TO_ID ON DS_TRANSFORMATION_LINK (TO_TRANSFORMATION_ID ASC);
CREATE INDEX SYS_IDX_10453 ON DS_TRANSFORMATION_LINK (FROM_TRANSFORMATION_ID ASC);
CREATE INDEX SYS_IDX_10455 ON DS_TRANSFORMATION_LINK (TO_TRANSFORMATION_ID ASC);
ALTER TABLE DS_TRANSFORMATION_LINK ADD CONSTRAINT FK_TRAN_FROM FOREIGN KEY (FROM_TRANSFORMATION_ID) REFERENCES DS_TRANSFORMATION (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE DS_TRANSFORMATION_LINK ADD CONSTRAINT FK_TRAN_TO FOREIGN KEY (TO_TRANSFORMATION_ID) REFERENCES DS_TRANSFORMATION (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10460_10464 ON DS_TRANSFORMATION_TYPE (CODE ASC);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10458_10461 ON DS_TRANSFORMATION_TYPE (ID ASC);


drop table if exists DS_URL;
CREATE TABLE DS_URL
(ID INTEGER NOT NULL AUTO_INCREMENT,
 SQUID_ID INTEGER,
 URL VARCHAR(500),
 USER_NAME VARCHAR(50),
 PASSWORD VARCHAR(50),
 MAX_FETCH_DEPTH INTEGER,
 `FILTER` VARCHAR(200),
 `DOMAIN` VARCHAR(50),
 DOMAIN_LIMIT_FLAG INTEGER,
  PRIMARY KEY (ID));

drop table if exists DS_WEB_CONNECTION;
CREATE TABLE DS_WEB_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 MAX_THREADS INTEGER,
 MAX_FETCH_DEPTH INTEGER,
 DOMAIN_LIMIT_FLAG INTEGER,
 START_DATA_DATE DATE,
 END_DATA_DATE DATE,
  PRIMARY KEY (ID));

CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10487_10488 ON DS_URL (ID ASC);
CREATE INDEX IDX_URL_SQUID_ID ON DS_URL (SQUID_ID ASC);
CREATE INDEX SYS_IDX_10695 ON DS_URL (SQUID_ID ASC);
ALTER TABLE DS_URL ADD CONSTRAINT FK_REFERENCE_33 FOREIGN KEY (SQUID_ID) REFERENCES DS_WEB_CONNECTION (ID) ON UPDATE NO ACTION ON DELETE CASCADE;


drop table if exists DS_VARIABLE;
CREATE TABLE DS_VARIABLE
(ID INTEGER NOT NULL AUTO_INCREMENT,
 PROJECT_ID INTEGER,
 SQUID_FLOW_ID INTEGER,
 SQUID_ID INTEGER,
 VARIABLE_SCOPE INTEGER,
 VARIABLE_NAME VARCHAR(200),
 VARIABLE_TYPE INTEGER,
 VARIABLE_LENGTH INTEGER,
 VARIABLE_PRECISION INTEGER,
 VARIABLE_SCALE INTEGER,
 VARIABLE_VALUE VARCHAR(500),
 ADD_DATE TIMESTAMP NOT NULL,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10531_10533 ON DS_VARIABLE (ID ASC);

CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10491_10492 ON DS_WEB_CONNECTION (ID ASC);
CREATE INDEX SYS_IDX_10494 ON DS_WEB_CONNECTION (ID ASC);
ALTER TABLE DS_WEB_CONNECTION ADD CONSTRAINT FK_REFERENCE_28 FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;



drop table if exists DS_WEBSERVICE_CONNECTION;
CREATE TABLE DS_WEBSERVICE_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 IS_RESTFUL CHARACTER(1),
 ADDRESS VARCHAR(200),
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10513_10514 ON DS_WEBSERVICE_CONNECTION (ID ASC);


drop table if exists DS_WEIBO_CONNECTION;
CREATE TABLE DS_WEIBO_CONNECTION
(ID INTEGER NOT NULL AUTO_INCREMENT,
 USER_NAME VARCHAR(100),
 PASSWORD VARCHAR(100),
 START_DATA_DATE DATE,
 END_DATA_DATE DATE,
 SERVICE_PROVIDER INTEGER,
  PRIMARY KEY (ID));
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10497_10498 ON DS_WEIBO_CONNECTION (ID ASC);
CREATE INDEX SYS_IDX_10500 ON DS_WEIBO_CONNECTION (ID ASC);
ALTER TABLE DS_WEIBO_CONNECTION ADD CONSTRAINT FK_REFERENCE_27 FOREIGN KEY (ID) REFERENCES DS_SQUID (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

/*初始化服务端系统配置*/
INSERT INTO ds_sys_server_parameter (ID, NAME, VALUE, DATA_TYPE, IS_COLLECTION) VALUES (1, 'SuperUserPwd', '111111', 'S', 'N');
INSERT INTO ds_sys_server_parameter (ID, NAME, VALUE, DATA_TYPE, IS_COLLECTION) VALUES (2, 'HsqlDBPath', 'D:/datashire/repository/', 'S', 'N');
INSERT INTO ds_sys_server_parameter (ID, NAME, VALUE, DATA_TYPE, IS_COLLECTION) VALUES (3, 'ServerPort', '9999', 'N', 'N');
INSERT INTO ds_sys_server_parameter (ID, NAME, VALUE, DATA_TYPE, IS_COLLECTION) VALUES (4, 'LimitedTime', 'm0fR5vEhxJ6X5Ey46nPIRA==', 'N', 'N');
INSERT INTO ds_sys_server_parameter (ID, NAME, VALUE, DATA_TYPE, IS_COLLECTION) VALUES (5, 'LicenseKey', '', 'N', 'N');
INSERT INTO ds_sys_server_parameter (ID, NAME, VALUE, DATA_TYPE, IS_COLLECTION) VALUES (6, 'VERSION', '2.0.0', 'N', 'N');
INSERT INTO ds_sys_server_parameter (ID, NAME, VALUE, DATA_TYPE, IS_COLLECTION) VALUES (7, 'SPLIT_COLUMN_FILTER', '{"MYSQL":"LONGBLOB,MEDIUMBLOB,TINYBLOB,XML","ORACLE":"BLOB,BINARY_DOUBLE,NCLOB,CLOB","SQLSERVER":"BINARY,VARBINARY,TIMESTAMP,UNIQUEIDENTIFIER,IMAGE,XML,HIERARCHYID,TEXT,NTEXT,DATETIMEOFFSET,SQL_VARIANT,BIT"}', 'N', 'N');

/* 初始化super user */
INSERT INTO DS_SYS_USER (ID, `KEY`, ROLE_ID, USER_NAME, PASSWORD, FULL_NAME, EMAIL_ADDRESS, STATUS_ID, IS_ACTIVE, LAST_LOGON_DATE, CREATION_DATE) VALUES (1, '58610ba8-5225-4300-81a2-b73dd5bdc168', null, 'superuser', '7066a4f427769cc43347aa96b72931a', 'superuser', 'www.eurlanda.com', null, 'N', null, null);


/*初始化 repository */
INSERT INTO ds_sys_repository (ID, TEAM_ID, `KEY`, NAME, DESCRIPTION, REPOSITORY_DB_NAME, TYPE, STATUS_ID, CREATION_DATE) VALUES (1, 1, 'F0EDEC4A-1D4D-CC2A-2BC6-9A6D81E52932', 'test', 'test', 'prod', 1, 1, '2013-10-19 16:17:45');
INSERT INTO ds_sys_repository (ID, TEAM_ID, `KEY`, NAME, DESCRIPTION, REPOSITORY_DB_NAME, TYPE, STATUS_ID, CREATION_DATE) VALUES (2, 1, 'DD98E05F-AE33-BAB9-DBF4-28BCF31A786E', 'dev', 'dev', 'prod', 1, 1, '2013-10-19 16:17:45');
INSERT INTO ds_sys_repository (ID, TEAM_ID, `KEY`, NAME, DESCRIPTION, REPOSITORY_DB_NAME, TYPE, STATUS_ID, CREATION_DATE) VALUES (3, 1, '23CCFA2B-CA06-1E23-EEB1-F6CFFB83C939', 'prod', 'prod', 'prod', 1, 1, '2013-10-19 16:17:45');

/*初始化 trans input definition */
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('VIRTUAL', 0, 21, '和squidColumn/referenceColumn绑定的虚拟转换。');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CONSTANT', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CHOICE', 9999, 21, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CONCATENATE', 9999, 9, '输入字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT', 0, 9, '要分析的源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT', 1, 9, '表达式');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT', 2, 2, '提取索引');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SPLIT', 0, 9, '被拆分的字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SPLIT', 1, 9, '分隔符');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ASCII', 0, 9, '要转换的字符');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('UNICODE', 0, 9, '要转换的字符');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SIMILARITY', 0, 9, '要对比的第一个字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SIMILARITY', 1, 9, '要对比的第二个字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CHAR', 0, 2, 'ASCII数值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PATTERNINDEX', 0, 9, '要搜索的目标字符串表达式');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PATTERNINDEX', 1, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLICATE', 0, 9, '被重复的字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLICATE', 1, 2, '重复的次数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('NUMERICTOSTRING', 0, 6, '要转化的数值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('STRINGTONUMERIC', 0, 9, '要转化的字符串数值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLACE', 0, 9, '在此字符串中搜索');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLACE', 1, 9, '替换成此字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LEFT', 0, 9, '被截取的源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LEFT', 1, 2, '截取的长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RIGHT', 0, 9, '被截取的源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RIGHT', 1, 2, '截取的长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SUBSTRING', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SUBSTRING', 1, 2, '开始截取的位置');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SUBSTRING', 2, 2, '截取的长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LENGTH', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REVERSE', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LOWER', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('UPPER', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LEFTTRIM', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RIGHTTRIM', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TRIM', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SYSTEMDATETIME', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('STRINGTODATETIME', 0, 9, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATETIMETOSTRING', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('YEAR', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MONTH', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DAY', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEDIFF', 0, 13, '开始日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEDIFF', 1, 13, '结束日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('FORMATDATE', 0, 9, '日期值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ABS', 0, 6, '数值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RANDOM', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ACOS', 0, 6, '-1到+1之间的浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('EXP', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ROUND', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ROUND', 1, 2, '舍入长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ASIN', 0, 6, '-1到+1之间的浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('FLOOR', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SIGN', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ATAN', 0, 6, '-∞到+∞之间的浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LOG', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SIN', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LOG10', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SQRT', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CEILING', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PI', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SQUARE', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('COS', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('POWER', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('POWER', 1, 2, '幂');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TAN', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('COT', 0, 6, '-1到+1之间的浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RADIANS', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CALCULATION', 0, 6, '参加运算的第一个浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CALCULATION', 1, 6, '参加运算的第二个浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MOD', 0, 2, '参加运算的整数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MOD', 1, 2, '模');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PROJECTID', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PROJECTNAME', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SQUIDFLOWID', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SQUIDFLOWNAME', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('JOBID', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TOKENIZATION', 0, 9, '分词文本');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PREDICT ', 0, 10, '预测数据');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PREDICT ', 1, 21, '预测数据的KEY');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('NUMASSEMBLE', 9999, 6, '浮点型输入');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TRAIN', 0, 10, '训练数据');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('NUMERICCAST', 0, 6, '被转换的数值输入');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('NUMERICCAST', 1, 2, '舍入的位数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('INVERSEQUANTIFY', 0, 6, '浮点输入');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CSNTOSTRING', 0, 10, 'CSN输入');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('COUNTRY', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PROVINCE', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CITY', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DISTRICT', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('STREET', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEPART', 0, 13, '原始日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATETOUNIXTIME', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('UNIXTIMETODATE', 0, 1, '要转换unix时间戳整数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEINC', 0, 13, '要做增减运算的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPPUT', 0, 1022, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPPUT', 1, 9, '要添加的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPPUT', 2, 21, '要添加的元素值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPGET', 0, 1022, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPGET', 1, 9, '要获取的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPREMOVE', 0, 1022, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPREMOVE', 1, 9, '要移除的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYPUT', 0, 86, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYPUT', 1, 2, '要添加的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYPUT', 2, 21, '要添加的元素值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYGET', 0, 86, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYGET', 1, 2, '要获取的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYREMOVE', 0, 86, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYREMOVE', 1, 2, '要移除的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEFORMAT', 0, 13, '将时间类型格式化为字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SPLIT2ARRAY', 0, 9, '将字符串分割为数组');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SPLIT2ARRAY', 1, 9, '分隔符');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT2ARRAY', 0, 9, '需要提取的原始字符串');

/*初始化 trans type */
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (-1, 'UNKNOWN', 21, '');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (0, 'VIRTUAL', 21, '和对应的column相同');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (1, 'UPPER', 9, '把一个字符串转换成大写串');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (2, 'CONCATENATE', 9, '把多个字符串按次序连接成一个字符串');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (3, 'LOWER', 9, '把一个字符串转换成小写串');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (4, 'CONSTANT', 21, '定义一个常量，可以是不同类型。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (5, 'CHOICE', 21, '根据各个输入对象的逻辑条件取值，输出一个逻辑条件取值为True的输入对象。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (7, 'TERMEXTRACT', 9, '从输入字符串的左边开始搜索，提取出和RegExpression匹配的第TermIndex个字串。如果没有，则返回空。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (8, 'SPLIT', 9, '对string类型的数据进行变换，把一个string拆分为几个字串，同时输出每一个子串。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (9, 'ASCII', 2, '返回一个字符的ASCII数值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (10, 'UNICODE', 2, '返回一个字符的Unicode数值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (11, 'SIMILARITY', 6, '计算两个字符串的相似度。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (12, 'CHAR', 8, '把一个ASCII整型数值转换为一个对应的字符。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (13, 'PATTERNINDEX', 2, '搜索一个字符串，返回另一个字符串（可以是正则表达式）在其中第1次出现的位置。如果没有出现返回-1.');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (14, 'REPLICATE', 9, '重复一个字符串指定次数');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (15, 'NUMERICTOSTRING', 9, '把一个数值数据转换为字符串。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (16, 'STRINGTONUMERIC', 6, '把一个字符串转换为数值数据。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (17, 'REPLACE', 9, '在一个字符串中寻找一个子串，并全部替换为另外一个字串。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (18, 'LEFT', 9, '从一个字符串的左边中截取特定长度的字串。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (19, 'RIGHT', 9, '从一个字符串的右边中截取特定长度的字串。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (21, 'SUBSTRING', 9, '从一个字符串中截取特定长度的子串。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (22, 'LENGTH', 2, '返回一个字符串的长度');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (23, 'REVERSE', 9, '把一个字符串倒序后返回');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (24, 'LEFTTRIM', 9, '去掉一个字符串左边的空格。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (25, 'RIGHTTRIM', 9, '去掉一个字符串右边的空格。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (26, 'TRIM', 9, '去掉一个字符串左边和右边的空格。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (27, 'ROWNUMBER', 2, '返回一行的记录号。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (28, 'SYSTEMDATETIME', 13, '返回一个YYYY-MM-DD hh:mm:ss[.nnn]类型的系统当前日期和时间');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (29, 'STRINGTODATETIME', 13, '把一个YYYY-MM-DD hh:mm:ss[.nnn]字符串转换为日期时间。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (30, 'DATETIMETOSTRING', 9, '把一个YYYY-MM-DD hh:mm:ss[.nnn]日期时间转换为字符串。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (31, 'YEAR', 2, '把一个YYYY-MM-DD hh:mm:ss[.nnn]日期时间的年部分转换为整型数值。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (32, 'MONTH', 2, '把一个YYYY-MM-DD hh:mm:ss[.nnn]日期时间的月部分转换为整型数值。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (33, 'DAY', 2, '把一个YYYY-MM-DD hh:mm:ss[.nnn]日期时间的天部分转换为整型数值。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (34, 'DATEDIFF', 2, '计算两个日期之间的差。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (35, 'FORMATDATE', 13, '把一个日期值格式化为DataShire系统内部统一格式');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (36, 'ABS', 6, '求绝对值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (37, 'RANDOM', 6, '返回0到1之间的一个随机数');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (38, 'ACOS', 6, '数学函数，返回其余弦是所指定的 float 表达式的角（弧度）；也称为反余弦');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (39, 'EXP', 6, '返回指定的 float 表达式的指数值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (40, 'ROUND', 6, '返回一个舍入到指定的长度的数值。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (41, 'ASIN', 6, '反正弦。');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (42, 'FLOOR', 2, '返回小于或等于指定数值表达式的最大整数');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (43, 'SIGN', 2, '返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (44, 'ATAN', 6, '反正切函数');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (45, 'LOG', 6, '自然对数');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (46, 'SIN', 6, '返回指定角度（以弧度为单位）的三角正弦值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (47, 'LOG10', 6, '返回指定 float 表达式的常用对数');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (48, 'SQRT', 6, '平方根');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (49, 'CEILING', 2, '返回大于或等于指定数值表达式的最小整数');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (50, 'PI', 6, '返回 PI 的常量值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (51, 'SQUARE', 6, '返回指定浮点值的平方');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (52, 'COS', 6, '返回指定表达式中以弧度表示的指定角的三角余弦');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (53, 'POWER', 6, '返回指定表达式的指定幂的值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (54, 'TAN', 6, '正切');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (55, 'COT', 6, '三角余切');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (56, 'RADIANS', 6, '对于在数值表达式中输入的度数值返回弧度值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (57, 'CALCULATION', 5, '对两个数值进行四则运算');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (58, 'MOD', 2, '对一个整数取模');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (59, 'PROJECTID', 2, '返回该Squid所在的Project的ID');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (60, 'PROJECTNAME', 9, '返回该Squid所在的Project的名字');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (61, 'SQUIDFLOWID', 2, '返回该Squid所在的SquidFlow的ID');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (62, 'SQUIDFLOWNAME', 9, '返回该Squid所在的SquidFlow的名字');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (63, 'JOBID', 2, '返回运行该Squid的Job的ID');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (64, 'TOKENIZATION', 10, '把文本按照分词规则转化为CSN');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (65, 'PREDICT', 6, '使用ModelSquid的model给出输入数据的预测值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (68, 'NUMASSEMBLE', 10, '把多个浮点值输入组装为一个CSN格式的字符串');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (70, 'TRAIN', 12, '根据该组件所归属的数据挖据squid，使用训练数据得出特定模型。要求标签在输入CSN的第1个位置');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (75, 'NUMERICCAST', 6, '数值精度转换');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (76, 'INVERSEQUANTIFY', 21, '把基于dm squidModelBase model的predict输出，反推得到原始的标签值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (77, 'CSNTOSTRING', 9, '把一个CSN序列转换成字符串');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (78, 'COUNTRY', 9, '例子: “中国河南省郑州市二七区花园路88号”.输出为“中国”');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (79, 'PROVINCE', 9, '例子: “中国河南省郑州市二七区花园路88号”.输出为“河南省”');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (80, 'CITY', 9, '例子: “中国河南省郑州市二七区花园路88号”.输出为“郑州市”');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (81, 'DISTRICT', 9, '例子: “中国河南省郑州市二七区花园路88号”.输出为“二七区”');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (82, 'STREET', 9, '例子: “中国河南省郑州市二七区花园路88号”.输出为“花园路88号”');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (83, 'DATEPART', 2, '把一个YYYY-MM-DD hh:mm:ss[.nnn]日期时间的部分转换为整型数值');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (84, 'DATETOUNIXTIME', 1, '把一个标准的系统日期转换为Unix时间戳数字');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (85, 'UNIXTIMETODATE', 13, '把一个Unix时间戳数字转换为标准的系统日期');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (86, 'DATEINC', 13, '对一个系统时间增加/减少特定时间单位');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (87, 'TASKID', 9, '返回TASK ID');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (88, 'MAPPUT', 1022, '把一个添加或修改集合中的元素');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (89, 'MAPGET', 1022, '获取集合中某一个元素');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (90, 'MAPREMOVE', 1022, '对一个系统时间增加/减少特定时间单位');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (91, 'ARRAYPUT', 86, '把一个添加或修改集合中的元素');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (92, 'ARRAYGET', 86, '获取集合中某一个元素');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (93, 'ARRAYREMOVE', 86, '对一个系统时间增加/减少特定时间单位');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (94, 'DATEFORMAT', 9, '将时间类型格式化为字符串');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (95, 'SPLIT2ARRAY', 86, '将字符串分割为数组');
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (96, 'TERMEXTRACT2ARRAY', 86, '提取符合表达式要求的字符串结果集');

/* 初始化 squidModelBase type */
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (-1, '-1', 'UNKNOWN');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (0, '0', 'DBSOURCE');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (1, '1', 'DBDESTINATION');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (2, '2', 'EXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (3, '3', 'STAGE');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (4, '4', 'DIMENSION');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (5, '5', 'FACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (6, '6', 'REPORT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (7, '7', 'DOC_EXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (8, '8', 'XML_EXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (9, '9', 'WEBLOGEXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (10, '10', 'WEBEXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (11, '11', 'WEIBOEXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (12, '12', 'FILEFOLDER');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (13, '13', 'FTP');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (14, '14', 'HDFS');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (15, '15', 'WEB');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (17, '17', 'WEIBO');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (20, '20', 'EXCEPTION');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (21, '21', 'LOGREG');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (22, '22', 'NAIVEBAYES');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (23, '23', 'SVM');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (24, '24', 'KMEANS');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (25, '25', 'ALS');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (26, '26', 'LINEREG');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (27, '27', 'RIDGEREG');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (28, '28', 'QUANTIFY');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (29, '29', 'DISCRETIZE');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (30, '30', 'DECISIONTREE');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (31, '31', 'GISMAP');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (32, '32', 'HTTP');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (33, '33', 'WEBSERVICE');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (34, '34', 'HTTPEXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (35, '35', 'WEBSERVICEEXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (36, '36', 'DESTWS');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (37, '37', 'ANNOTATION');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (38, '38', 'MONGODB');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (39, '39', 'MONGODBEXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (40, '40', 'DESTES');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (41, '41', 'KAFKA');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (42, '42', 'KAFKAEXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (43, '43', 'HBASE');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (44, '44', 'HBASEEXTRACT');
INSERT INTO DS_SQUID_TYPE (ID, CODE, DESCRIPTION) VALUES (45, '45', 'STREAM_STAGE');


/*删除没有必要的索引*/
/**/
alter table ds_column drop index SYS_IDX_10586;

alter table ds_annotation_squid drop index SYS_IDX_SYS_PK_10509_10510;

alter table ds_data_squid drop index SYS_IDX_SYS_PK_10273_10274;
alter table ds_data_squid drop index SYS_IDX_10592;

alter table ds_dest_webservice drop index SYS_IDX_SYS_PK_10537_10538;

alter table ds_dm_squid drop index SYS_IDX_SYS_PK_10503_10504;
alter table ds_dm_squid drop index SYS_IDX_10506;

alter table ds_doc_extract drop index SYS_IDX_SYS_PK_10277_10278;
alter table ds_doc_extract drop index SYS_IDX_10595;

alter table ds_filefolder_connection drop index SYS_IDX_SYS_PK_10281_10282;
alter table ds_filefolder_connection drop index SYS_IDX_10598;

alter table ds_ftp_connection drop index SYS_IDX_SYS_PK_10285_10286;
alter table ds_ftp_connection drop index SYS_IDX_10601;

alter table ds_gis_map_squid drop index SYS_IDX_SYS_PK_10525_10526;
alter table ds_gis_map_squid drop index SYS_IDX_10528;

alter table ds_hbase_connection drop index SYS_IDX_SYS_PK_10572_10573;

alter table ds_hbase_extract drop index SYS_IDX_SYS_PK_10576_10577;

alter table ds_hdfs_connection drop index SYS_IDX_SYS_PK_10289_10290;
alter table ds_hdfs_connection drop index SYS_IDX_10604;

alter table ds_http_connection drop index SYS_IDX_SYS_PK_10517_10518;

alter table ds_indexes drop index SYS_IDX_SYS_PK_10293_10297;
alter table ds_indexes drop index IDX_INDEXES_SQUID_ID;

alter table ds_join drop index SYS_IDX_SYS_PK_10303_10309;
alter table ds_join drop index SYS_IDX_10612;
alter table ds_join drop index SYS_IDX_10620;
alter table ds_join drop index SYS_IDX_10628;

alter table ds_join_type drop index SYS_IDX_SYS_PK_10317_10318;

alter table ds_kafka_connection drop index SYS_IDX_SYS_PK_10564_10565;

alter table ds_kafka_extract drop index SYS_IDX_SYS_PK_10568_10569;

alter table ds_no_sql_connection drop index SYS_IDX_SYS_PK_10374_10376;

alter table ds_project drop index SYS_IDX_SYS_PK_10321_10324;

alter table ds_reference_column drop index SYS_IDX_10640;
alter table ds_reference_column drop index SYS_IDX_10636;

alter table ds_reference_column_group drop index SYS_IDX_SYS_PK_10334_10337;
alter table ds_reference_column_group drop index SYS_IDX_10644;

alter table ds_report_squid drop index SYS_IDX_SYS_PK_10342_10343;
alter table ds_report_squid drop index SYS_IDX_10649;

alter table ds_report_version drop index SYS_IDX_SYS_PK_10545_10548;

alter table ds_source_column drop index SYS_IDX_SYS_PK_10346_10351;
alter table ds_source_column drop index SYS_IDX_10652;

alter table ds_source_table drop index SYS_IDX_SYS_PK_10358_10362;
alter table ds_source_table drop index SYS_IDX_10658;

alter table ds_sql_connection drop index SYS_IDX_SYS_PK_10368_10370;
alter table ds_sql_connection drop index SYS_IDX_10663;

alter table ds_squid drop index SYS_IDX_SYS_PK_10380_10390;
alter table ds_squid drop index SYS_IDX_10667;
alter table ds_squid drop index SYS_IDX_10678;

alter table ds_squid_flow drop index SYS_IDX_SYS_PK_10402_10406;
alter table ds_squid_flow drop index SYS_IDX_10411;

alter table ds_squid_link drop index SYS_IDX_10423;
alter table ds_squid_link drop index SYS_IDX_SYS_PK_10414_10418;

alter table ds_squid_type drop index SYS_IDX_SYS_PK_10426_10428;

alter table ds_start_squid_flow_log drop index SYS_IDX_SYS_PK_10541_10542;

alter table ds_sys_action_header drop index SYS_IDX_SYS_PK_10162_10168;

alter table ds_sys_application_status drop index SYS_IDX_SYS_PK_10580_10582;

alter table ds_sys_datatype_mapping drop index SYS_IDX_SYS_PK_10189_10193;

alter table ds_sys_entity_type drop index SYS_IDX_SYS_PK_10157_10159;

alter table ds_sys_group drop index SYS_IDX_SYS_PK_10120_10123;

alter table ds_sys_job_schedule drop index SYS_IDX_SYS_PK_10231_10232;

alter table ds_sys_metadata_node drop index SYS_IDX_SYS_PK_10221_10222;

alter table ds_sys_metadata_node_attr drop index SYS_IDX_SYS_PK_10225_10226;

alter table ds_sys_report_folder drop index SYS_IDX_SYS_PK_10209_10210;

alter table ds_sys_report_folder_mapping drop index SYS_IDX_SYS_PK_10215_10216;
alter table ds_sys_report_folder_mapping drop index SYS_IDX_10218;

alter table ds_sys_repository drop index SYS_IDX_SYS_PK_10099_10104;

alter table ds_sys_repository_status drop index SYS_IDX_SYS_PK_10114_10116;

alter table ds_sys_role drop index SYS_IDX_SYS_PK_10131_10134;

alter table ds_sys_server_parameter drop index SYS_IDX_SYS_PK_10181_10184;

alter table ds_sys_sf_job_history drop index SYS_IDX_SYS_PK_10235_10236;
alter table ds_sys_sf_job_history drop index SYS_IDX_10238;

alter table ds_sys_sf_job_module_log drop index SYS_IDX_10246;

alter table ds_sys_sf_log drop index SYS_IDX_SYS_PK_10249_10251;

alter table ds_sys_squid_flow_status drop index SYS_IDX_SYS_PK_10257_10258;

alter table ds_sys_team drop index SYS_IDX_SYS_PK_10092_10094;

alter table ds_sys_template_data drop index SYS_IDX_SYS_PK_10203_10204;

alter table ds_sys_template_type drop index SYS_IDX_SYS_PK_10199_10200;

alter table ds_sys_user drop index SYS_IDX_SYS_PK_10142_10145;

alter table ds_sys_user_status drop index SYS_IDX_SYS_PK_10153_10154;

alter table ds_thirdparty_params drop index SYS_IDX_SYS_PK_10521_10522;

alter table ds_tran_inputs drop index SYS_IDX_SYS_PK_10466_10469;
alter table ds_tran_inputs drop index SYS_IDX_10473;
alter table ds_tran_inputs drop index SYS_IDX_10475;

alter table ds_transformation drop index SYS_IDX_SYS_PK_10432_10436;
alter table ds_transformation drop index SYS_IDX_10441;
alter table ds_transformation drop index SYS_IDX_10689;

alter table ds_transformation_link drop index SYS_IDX_SYS_PK_10444_10448;
alter table ds_transformation_link drop index SYS_IDX_10453;
alter table ds_transformation_link drop index SYS_IDX_10455;

alter table ds_url drop index SYS_IDX_SYS_PK_10487_10488;
alter table ds_url drop index SYS_IDX_10695;

alter table ds_variable drop index SYS_IDX_SYS_PK_10531_10533;

alter table ds_web_connection drop index SYS_IDX_SYS_PK_10491_10492;
alter table ds_web_connection drop index SYS_IDX_10494;

alter table ds_webservice_connection drop index SYS_IDX_SYS_PK_10513_10514;

alter table ds_weibo_connection drop index SYS_IDX_SYS_PK_10497_10498;
alter table ds_weibo_connection drop index SYS_IDX_10500;

alter table ds_column add index IDX_KEY(`key`);
alter table ds_transformation add index IDX_KEY(`key`);

UPDATE DS_SYS_SERVER_PARAMETER SET value='2.0.0' where name = 'VERSION';

DELETE FROM ds_tran_input_definition;
/* 增加了新的trans inputs */
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('VIRTUAL', 0, 21, '和squidColumn/referenceColumn绑定的虚拟转换。');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CONSTANT', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CHOICE', 9999, 21, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CONCATENATE', 9999, 9, '输入字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT', 0, 9, '要分析的源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT', 1, 9, '表达式');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT', 2, 2, '提取索引');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SPLIT', 0, 9, '被拆分的字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SPLIT', 1, 9, '分隔符');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ASCII', 0, 9, '要转换的字符');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('UNICODE', 0, 9, '要转换的字符');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SIMILARITY', 0, 9, '要对比的第一个字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SIMILARITY', 1, 9, '要对比的第二个字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CHAR', 0, 2, 'ASCII数值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PATTERNINDEX', 0, 9, '要搜索的目标字符串表达式');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PATTERNINDEX', 1, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLICATE', 0, 9, '被重复的字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLICATE', 1, 2, '重复的次数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('NUMERICTOSTRING', 0, 6, '要转化的数值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('STRINGTONUMERIC', 0, 9, '要转化的字符串数值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLACE', 0, 9, '在此字符串中搜索');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLACE', 1, 9, '替换成此字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REPLACE', 2, 9, '匹配模式');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LEFT', 0, 9, '被截取的源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LEFT', 1, 2, '截取的长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RIGHT', 0, 9, '被截取的源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RIGHT', 1, 2, '截取的长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SUBSTRING', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SUBSTRING', 1, 2, '开始截取的位置');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SUBSTRING', 2, 2, '截取的长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LENGTH', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LENGTH', 1, 2, '截取的长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('REVERSE', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LOWER', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('UPPER', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LEFTTRIM', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RIGHTTRIM', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TRIM', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SYSTEMDATETIME', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('STRINGTODATETIME', 0, 9, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATETIMETOSTRING', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('YEAR', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MONTH', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DAY', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEDIFF', 0, 13, '开始日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEDIFF', 1, 13, '结束日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('FORMATDATE', 0, 9, '日期值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ABS', 0, 6, '数值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RANDOM', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ACOS', 0, 6, '-1到+1之间的浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('EXP', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ROUND', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ROUND', 1, 2, '舍入长度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ASIN', 0, 6, '-1到+1之间的浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('FLOOR', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SIGN', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ATAN', 0, 6, '-1到+1之间的浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LOG', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SIN', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('LOG10', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SQRT', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CEILING', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PI', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SQUARE', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('COS', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('POWER', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('POWER', 1, 2, '幂');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TAN', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('COT', 0, 6, '-1到+1之间的浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RADIANS', 0, 6, '浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CALCULATION', 0, 6, '参加运算的第一个浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CALCULATION', 1, 6, '参加运算的第二个浮点数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MOD', 0, 2, '参加运算的整数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MOD', 1, 2, '模');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PROJECTID', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PROJECTNAME', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SQUIDFLOWID', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SQUIDFLOWNAME', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('JOBID', -1, 0, '');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TOKENIZATION', 0, 9, '分词文本');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PREDICT ', 0, 10, '预测数据');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PREDICT ', 1, 21, '预测数据的KEY');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('NUMASSEMBLE', 9999, 6, '浮点型输入');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TRAIN', 0, 10, '训练数据');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('NUMERICCAST', 0, 6, '被转换的数值输入');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('NUMERICCAST', 1, 2, '舍入的位数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('INVERSEQUANTIFY', 0, 6, '浮点输入');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CSNTOSTRING', 0, 10, 'CSN输入');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('COUNTRY', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('PROVINCE', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CITY', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DISTRICT', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('STREET', 0, 9, '源字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEPART', 0, 13, '原始日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATETOUNIXTIME', 0, 13, '要转换的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('UNIXTIMETODATE', 0, 1, '要转换unix时间戳整数');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEINC', 0, 13, '要做增减运算的日期');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPPUT', 0, 1022, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPPUT', 1, 9, '要添加的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPPUT', 2, 21, '要添加的元素值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPGET', 0, 1022, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPGET', 1, 9, '要获取的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPREMOVE', 0, 1022, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('MAPREMOVE', 1, 9, '要移除的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYPUT', 0, 86, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYPUT', 1, 2, '要添加的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYPUT', 2, 21, '要添加的元素值');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYGET', 0, 86, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYGET', 1, 2, '要获取的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYREMOVE', 0, 86, '原始集合');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('ARRAYREMOVE', 1, 2, '要移除的元素键');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('DATEFORMAT', 0, 13, '将时间类型格式化为字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SPLIT2ARRAY', 0, 9, '将字符串分割为数组');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('SPLIT2ARRAY', 1, 9, '分隔符');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT2ARRAY', 0, 9, '需要提取的原始字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('TERMEXTRACT2ARRAY', 1, 9, '表达式');

/* 删除表中冗余的字段 */
ALTER TABLE ds_transformation DROP COLUMN REG_EXPRESSION;
ALTER TABLE ds_transformation DROP COLUMN TERM_INDEX;
ALTER TABLE ds_transformation DROP COLUMN DELIMITER;
ALTER TABLE ds_transformation DROP COLUMN REPLICA_COUNT;
ALTER TABLE ds_transformation DROP COLUMN `LENGTH`;
ALTER TABLE ds_transformation DROP COLUMN START_POSITION;
ALTER TABLE ds_transformation DROP COLUMN POWER;
ALTER TABLE ds_transformation DROP COLUMN MODULUS;

/* 为trans input 增加value字段*/
ALTER TABLE ds_tran_inputs ADD INPUT_VALUE VARCHAR(50);


/* 增加新表 HDFS落地 */
CREATE TABLE ds_dest_hdfs_squid
(ID int NOT NULL AUTO_INCREMENT,
HOST varchar(50),
HDFS_PATH VARCHAR(200),
FILE_FORMATE int,
ZIP_TYPE int,
SAVE_TYPE int,
COLUMN_DELIMITER VARCHAR (20),
ROW_DELIMITER VARCHAR (20),
PRIMARY KEY (ID));

insert into ds_squid_type (ID, CODE, DESCRIPTION) values (46, 46, 'DEST_HDFS');

CREATE TABLE ds_dest_hdfs_column
(ID int NOT NULL AUTO_INCREMENT,
COLUMN_ID int NOT NULL,
SQUID_ID int NOT NULL,
IS_DEST_COLUMN int,
FIELD_NAME varchar(200),
COLUMN_ORDER int,
PRIMARY KEY (ID));

/* 增加impala落地 */
INSERT INTO ds_squid_type (ID, CODE, DESCRIPTION) VALUES (47, 47, 'DEST_IMPALA');
CREATE TABLE ds_dest_impala_squid
(
  ID INT NOT NULL AUTO_INCREMENT,
  HOST VARCHAR (50),
  STORE_NAME VARCHAR (50),
  IMPALA_TABLE_NAME VARCHAR (50),
  AUTHENTICATION_TYPE INT,
  PRIMARY KEY (ID)
);
CREATE TABLE ds_dest_impala_column
(ID int NOT NULL AUTO_INCREMENT,
COLUMN_ID int NOT NULL,
SQUID_ID int NOT NULL,
IS_DEST_COLUMN int,
FIELD_NAME varchar(200),
COLUMN_ORDER int,
PRIMARY KEY (ID));



/* 为ds_dm_squid增加用于关联分析的字段 */
INSERT INTO ds_squid_type (ID, CODE, DESCRIPTION) VALUES (48, 48, 'ASSOCIATION_RULES');
ALTER TABLE ds_dm_squid ADD MIN_SUPPORT DOUBLE;
ALTER TABLE ds_dm_squid ADD MIN_CONFIDENCE DOUBLE;

/* 增加CSV组装Trans */
INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (97, 'CSVASSEMBLE', 10, '把多个字符串拼接成CSV格式的字符串');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('CSVASSEMBLE', 9999, 9, '要组合CSV的字符串');

INSERT INTO ds_transformation_type (ID, CODE, OUTPUT_DATA_TYPE, DESCRIPTION) VALUES (98, 'RULESQUERY', 1022, '用于关联规则查询');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RULESQUERY', 0, 15, '前项');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RULESQUERY', 1, 2, '前项中的元素数量');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RULESQUERY', 2, 15, '后项');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RULESQUERY', 3, 2, '后项中的元素数量');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RULESQUERY', 4, 6, '最小可信度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RULESQUERY', 5, 6, '最小规则支持度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RULESQUERY', 6, 6, '最小提升度');
INSERT INTO ds_tran_input_definition (CODE, INPUT_ORDER, INPUT_DATA_TYPE, DESCRIPTION) VALUES ('RULESQUERY', 7, 2, '规则数量');

/* 为了优化性能在Trans表内增加两个字段 */
ALTER TABLE ds_tran_inputs ADD INPUT_DATA_TYPE INT;
ALTER TABLE ds_tran_inputs ADD DESCRIPTION VARCHAR(500);

/*往ds_hdfs_connection表中插入including_subfolders_flag字段 表示是否选择递归的状态 */
ALTER TABLE DS_HDFS_CONNECTION ADD INCLUDING_SUBFOLDERS_FLAG BIGINT;
/* 修改including_subfolders_flag字段类型bigInt改为int*/
ALTER TABLE DS_HDFS_CONNECTION MODIFY INCLUDING_SUBFOLDERS_FLAG INT;
/*修改ds_squid中的filter属性的长度*/
ALTER TABLE DS_SQUID MODIFY COLUMN `FILTER` NVARCHAR(2000);

/*修改rulesquery的出参为array*/
UPDATE ds_transformation_type  SET OUTPUT_DATA_TYPE=86 WHERE ID=98;
ALTER TABLE DS_TRAN_INPUT_DEFINITION ADD CONSTRAINT FK_REFERENCE_34 FOREIGN KEY (CODE) REFERENCES DS_TRANSFORMATION_TYPE (CODE) ON UPDATE NO ACTION ON DELETE NO ACTION;

/*增加IS_PARTITION_COLUMN作为HDFS落地分片的标示*/
ALTER TABLE ds_dest_hdfs_column ADD `IS_PARTITION_COLUMN` INT;

/*创建历史版本列表数据表*/
DROP TABLE IF EXISTS SQUID_FLOW_HISTORY;
CREATE TABLE SQUID_FLOW_HISTORY (
  ID INTEGER NOT NULL AUTO_INCREMENT,
  SQUID_FLOW_ID INTEGER,
  SQUID_FLOW_NAME varchar(255),
  PROJECT_ID INTEGER,
  PROJECT_NAME varchar(255) ,
  REPOSITORY_ID INTEGER ,
  USER_ID INTEGER ,
  COMMIT_TIME TIMESTAMP,
  COMMENTS varchar(4000) ,
  VERSION INTEGER,
  SQUID_FLOW_TYPE INTEGER ,
  SUBMIT_USERNAME varchar(255),
  PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX SQUID_FLOW_HISTORY_ID ON SQUID_FLOW_HISTORY(ID ASC);
CREATE INDEX HISTORY_SQUIDFLOWID_PROJECTID_REP_ID ON SQUID_FLOW_HISTORY(SQUID_FLOW_ID,PROJECT_ID,REPOSITORY_ID);

/*创建历史版本数据表*/
DROP TABLE IF EXISTS HISTORY_VERSION_DATA;
CREATE TABLE HISTORY_VERSION_DATA (
  ID INTEGER NOT NULL AUTO_INCREMENT,
  SQUIDFLOWHISTORYID INTEGER,
  SQUID_FLOW_ID INTEGER ,
  REPOSITORY_ID INTEGER ,
  COMMIT_TIME timestamp ,
  DATA longtext,
  SQUIDTYPE INTEGER ,
  PROCESSTYPE INTEGER ,
  SQUID_FLOW_TYPE INTEGER ,
  PRIMARY KEY (id)
);
CREATE UNIQUE  INDEX VERSION_DATA_ID ON HISTORY_VERSION_DATA(ID ASC);
CREATE INDEX DATA_FLOWID_REPID_PROTYPE ON HISTORY_VERSION_DATA(SQUIDFLOWHISTORYID,SQUID_FLOW_ID,REPOSITORY_ID,PROCESSTYPE,SQUID_FLOW_TYPE);

/*这里需要在mysql的配置文件my.ini(my.cnf)中添加或者修改成这段配置
  max_allowed_packet = 30M
  避免在版本控制里面数据插入不成功
*/