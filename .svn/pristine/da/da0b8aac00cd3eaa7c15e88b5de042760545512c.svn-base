package com.eurlanda.datashire.sprint7.service.squidflow;

import com.eurlanda.datashire.adapter.CassandraAdapter;
import com.eurlanda.datashire.adapter.DataAdapterFactory;
import com.eurlanda.datashire.adapter.IRelationalDataManager;
import com.eurlanda.datashire.adapter.db.AdapterDataSourceManager;
import com.eurlanda.datashire.adapter.db.INewDBAdapter;
import com.eurlanda.datashire.dao.ISourceColumnDao;
import com.eurlanda.datashire.dao.ISourceTableDao;
import com.eurlanda.datashire.dao.ISquidDao;
import com.eurlanda.datashire.dao.impl.SourceColumnDaoImpl;
import com.eurlanda.datashire.dao.impl.SourceTableDaoImpl;
import com.eurlanda.datashire.dao.impl.SquidDaoImpl;
import com.eurlanda.datashire.entity.CassandraConnectionSquid;
import com.eurlanda.datashire.entity.DBConnectionInfo;
import com.eurlanda.datashire.entity.DBSourceSquid;
import com.eurlanda.datashire.entity.DBSourceTable;
import com.eurlanda.datashire.entity.SourceColumn;
import com.eurlanda.datashire.entity.SystemHiveConnectionSquid;
import com.eurlanda.datashire.entity.operation.SquidDataSet;
import com.eurlanda.datashire.entity.operation.SquidRunTimeProperties;
import com.eurlanda.datashire.entity.operation.StageSquidAndSquidLink;
import com.eurlanda.datashire.enumeration.DSObjectType;
import com.eurlanda.datashire.enumeration.DataBaseType;
import com.eurlanda.datashire.enumeration.SquidTypeEnum;
import com.eurlanda.datashire.exception.SystemErrorException;
import com.eurlanda.datashire.server.utils.TokenUtil;
import com.eurlanda.datashire.sprint7.packet.InfoNewMessagePacket;
import com.eurlanda.datashire.sprint7.packet.InfoNewPacket;
import com.eurlanda.datashire.sprint7.packet.InfoPacket;
import com.eurlanda.datashire.sprint7.packet.PushMessagePacket;
import com.eurlanda.datashire.utility.JsonUtil;
import com.eurlanda.datashire.utility.MessageCode;
import com.eurlanda.datashire.utility.ReturnValue;
import com.eurlanda.datashire.utility.SysConf;
import com.eurlanda.datashire.utility.objectsql.SelectSQL;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

/**
 * DataShirProcess预处理类
 * DataShirProcess预处理类：对数据进行验证验证数据的完整性和正确性；并调用下层业务处理方法
 * Title : 
 * Description: 
 * Author :赵春花 2013-9-4
 * update :赵春花 2013-9-4
 * Department :  JAVA后端研发部
 * Copyright : ©2012-2013 悦岚（上海）数据服务有限公司
 */
public class DataShirProcess implements IDataShirProcess{
	@Autowired
	private com.eurlanda.datashire.server.service.RepositoryService repositoryService;
	static Logger logger = Logger.getLogger(DataShirProcess.class);// 记录日志
	private String token;
	private String key;

	public String getToken() {
		return token;
	}

	public void setToken(String token) {
		this.token = token;
	}

	public String getKey() {
		return key;
	}

	public void setKey(String key) {
		this.key = key;
	}

	DataShirServiceplug repositoryPlug;
	
	public DataShirProcess(String token) {
		this.token = token;
		repositoryPlug = new DataShirServiceplug(token);
	}
	
	public DataShirProcess(String token, String key) {
		this.token = token;
		this.key = key;
		repositoryPlug = new DataShirServiceplug(token, key);
	}
	
	/**
	 * 根据类型删除数据
	 * 作用描述：
	 * 修改说明：
	 *@param info
	 *@param out
	 *@return
	 */
	public boolean deleteRepositoryObject(String info,ReturnValue out){
		logger.debug(String.format("deleteRepositoryObject-info", info));
		boolean delete = false;
		List<InfoNewPacket> infoPackets = JsonUtil.toGsonList(info, InfoNewPacket.class);
		delete = repositoryPlug.deleteRepositoryObject(infoPackets, out);
		logger.debug(String.format("deleteRepositoryObject-return", info));
		return delete;
	}


	/**
	 * 删除一个Squidflow内所有的Squid
	 * @param info
	 * @return
     */
	public String deleteAllSquidsInSquidflow(String info){
		ReturnValue out = new ReturnValue();
		IRelationalDataManager adapter = null;
		//增加定时器，防止批量操作时，超时
		final Map<String,Object> returnMap = new HashMap<>();
		returnMap.put("1",1);
		Timer timer = new Timer();
		key = TokenUtil.getKey();
		token = TokenUtil.getToken();
		try{
			timer.schedule(new TimerTask() {
				@Override
				public void run() {
					PushMessagePacket.pushMap(returnMap,DSObjectType.SQUID_FLOW,"0001","0026",key,token,MessageCode.BATCH_CODE.value());
				}
			},25*1000,25*1000);
			Map<String, Object> param = JsonUtil.toHashMap(info);
			int repositoryId = Integer.valueOf(param.get("RepositoryId").toString());
			int squidFlowId = Integer.valueOf(param.get("SquidFlowId").toString());
			adapter = DataAdapterFactory.getDefaultDataManager();
			adapter.openSession();
            repositoryPlug.deleteSquidFlow(adapter, squidFlowId, repositoryId, true, out, 0);
        }catch (Exception e){
			timer.cancel();
			timer.purge();
			logger.error("delete all squids in squidflow error",e);
			out.setMessageCode(MessageCode.UPDATE_ERROR);
			try{
				adapter.rollback();
			}catch (SQLException e1){  // 数据库回滚失败（程序不能处理该异常）！
				logger.fatal("rollback err !",e1);
			}
		}finally {
			timer.cancel();
			timer.purge();
			adapter.closeSession();
		}
		InfoNewMessagePacket infoNewMessagePacket = new InfoNewMessagePacket<>(new HashMap<>(),out.getMessageCode().value());
		return infoNewMessagePacket.toJsonString();
	}
	
	/**
	 * 查询SquidAndSquidLink信息
	 * 作用描述：
	 *根据SquidFlowId查询Squid信息和SquidLink信息
	 *序列化传入InfoPacket信息获得SquidFlowID
	 * 修改说明：
	 *@param info
	 *@param out
	 */
	public int queryAllSquidAndSquidLink(String info, ReturnValue out){
		logger.debug(String.format("queryAllSquidAndSquidLink-info=%s", info));
		int query = 0;
		InfoPacket infoPacket = JsonUtil.toGsonBean(info, InfoPacket.class);
		if(infoPacket.getId()== 0 || infoPacket.getKey()== null){
			//异常记录
			return query;
		}
		query = repositoryPlug.queryAllSquidAndSquidLink(infoPacket, out);
		//SquidTransformationFactory.newInstance().addPushTransformationMessage(infoPacket.getId(), token);
		logger.debug(String.format("queryAllSquidAndSquidLink-return=%s", query));
		return query;
	}
	
	/**
	 * 
	 * 作用描述：
	 * 修改说明：
	 *@param info json字符串
	 *@param out 异常处理
	 *@return
	 */
	public StageSquidAndSquidLink drag2StageSquid(String info, ReturnValue out){
		StageSquidAndSquidLink squidAndSquidLinks = JsonUtil.toGsonBean(info, StageSquidAndSquidLink.class);
		repositoryPlug.drag2StageSquid(squidAndSquidLinks, out);
		out.setMessageCode(MessageCode.SUCCESS); // 检查返回值是否正常
		return squidAndSquidLinks;
	}
	
	/**
	 * 获得变换序列中的数据
	 * 作用描述：
	 * 序列化前端传入Json对象
	 * 修改说明：
	 *@param info json字符串
	 *@param out 异常处理
	 *@return
	 */
	public Map<String, Object> queryDatas(String info,ReturnValue out){
		Map<String, Object> outputMap = new HashMap<String, Object>();
		IRelationalDataManager adapter = DataAdapterFactory.getDefaultDataManager();
		INewDBAdapter iNewDBAdapter=null;
		try {
			HashMap<String, Object> data=JsonUtil.toHashMap(info);
			int sourceTableId=Integer.parseInt(data.get("SourceTableId").toString()) ;
			adapter.openSession();
			//根据sourceTableId查询对象
			ISourceTableDao sourceTableDao=new SourceTableDaoImpl(adapter);
			DBSourceTable dbSourceTable=sourceTableDao.getObjectById(sourceTableId, DBSourceTable.class);
			if(dbSourceTable!=null){
				//根据Source_squid_id()查询ds_sql_connection对象
				ISquidDao squidDao=new SquidDaoImpl(adapter);
				DBSourceSquid dbSourceSquid=squidDao.getSquidForCond(dbSourceTable.getSource_squid_id(),DBSourceSquid.class);
				if((dbSourceSquid.getSquid_type() == SquidTypeEnum.TRAININGDBSQUID.value()
						|| dbSourceSquid.getSquid_type() == SquidTypeEnum.CLOUDDB.value())){
					//dbSourceSquid.setHost(SysConf.getValue("train_db_real_host"));
					if(dbSourceSquid.getHost().equals(SysConf.getValue("train_db_host"))
							|| dbSourceSquid.getHost().equals(SysConf.getValue("cloud_host")+":3306")) {
						int squidFlowId = dbSourceSquid.getSquidflow_id();
						//确定链接信息
						String sql = "select dsr.* from ds_sys_repository dsr,ds_project dp,ds_squid_flow dsf where dsr.id = dp.REPOSITORY_ID and dp.id = dsf.project_id  and dsf.id=" + squidFlowId;
						Map<String, Object> map = adapter.query2Object(true, sql, null);
						Integer repositoryId = (Integer) map.get("ID");
						String dbUrl = repositoryService.getDbUrlByRepositoryId(repositoryId);
						//String dbUrl = repService.getDBUrlBySquidFlowId(squidFlowId);
						dbSourceSquid.setHost(dbUrl);
					}
				}
				//根据sourceTableId查询列集合
				ISourceColumnDao sourceColumnDao=new SourceColumnDaoImpl(adapter);
				List<SourceColumn> sourceColumns=sourceColumnDao.getSourceColumnByTableId(sourceTableId);
				DBConnectionInfo dbs = new DBConnectionInfo();
				Map<String,String> tempMap=this.getNameAndType(sourceColumns,dbSourceSquid.getDb_type());
				this.setDBInfo(dbSourceSquid, dbs);
				iNewDBAdapter = AdapterDataSourceManager.getAdapter(dbs);
				String tableName=dbSourceTable.getTable_name();
				if(dbSourceSquid.getDb_type()==DataBaseType.MYSQL.value()){
					tableName="'"+tableName+"'";
				}
				SelectSQL sql = new SelectSQL(tableName.replaceAll("'","`"));
				sql.setMaxCount(100);
				List<Map<String, Object>> dataList = iNewDBAdapter.queryForList(sql,tempMap);
				if (dataList.size() < 1) {
					out.setMessageCode(MessageCode.ERR_VALUEEMPTY);
				} else {
					outputMap.put("DataList", dataList);
				}
			}else{
				out.setMessageCode(MessageCode.Extract_IS_Connection_break);
			}
		} catch (Exception e) {
			// TODO: handle exception
			if(e instanceof SystemErrorException){
				//数据库连接信息出错
				SystemErrorException sysError = (SystemErrorException) e;
				if(sysError.getCode()==MessageCode.ERR_CONNECTION_NULL){
					out.setMessageCode(MessageCode.ERR_DATABASE_CONNECT);
				} else {
					out.setMessageCode(MessageCode.ERR_UNSUPPORTDATATYPE);
				}
			} else {
				String msg = e.getMessage();
				if(msg.contains("ErrorCode")){
					String errorCode=msg.substring(15,msg.indexOf(","));
					if("1146".equals(errorCode)){
						out.setMessageCode(MessageCode.TABLE_NOT_EXIST);
					} else {
						out.setMessageCode(MessageCode.ERR_UNSUPPORTDATATYPE);
					}
				}

			}
			logger.error("预览数据表信息异常", e);
		}finally {
			adapter.closeSession();
			if(iNewDBAdapter!=null){
				iNewDBAdapter.close();
			}
		}
		return outputMap;
	}

	/**
	 * 预览hive数据
	 * @param info json字符串
	 * @param out 异常处理
     * @return
     */
	public Map<String, Object> queryHiveData(String info,ReturnValue out){
		Map<String, Object> outputMap = new HashMap<String, Object>();
		IRelationalDataManager adapter = DataAdapterFactory.getDefaultDataManager();
		INewDBAdapter iNewDBAdapter=null;
		try {
			HashMap<String, Object> data=JsonUtil.toHashMap(info);
			int sourceTableId=Integer.parseInt(data.get("SourceTableId").toString()) ;
			adapter.openSession();
			//根据sourceTableId查询对象
			ISourceTableDao sourceTableDao=new SourceTableDaoImpl(adapter);
			DBSourceTable dbSourceTable=sourceTableDao.getObjectById(sourceTableId, DBSourceTable.class);
			//根据Source_squid_id()查询ds_sql_connection对象
			ISquidDao squidDao=new SquidDaoImpl(adapter);
			SystemHiveConnectionSquid dbSourceSquid=squidDao.getSquidForCond(dbSourceTable.getSource_squid_id(),SystemHiveConnectionSquid.class);
			//根据sourceTableId查询列集合
			//ISourceColumnDao sourceColumnDao=new SourceColumnDaoImpl(adapter);
			//List<SourceColumn> sourceColumns=sourceColumnDao.getSourceColumnByTableId(sourceTableId);
			DBConnectionInfo dbs = new DBConnectionInfo();
			//Map<String,String> tempMap=this.getNameAndType(sourceColumns,dbSourceSquid.getDb_type());
			dbSourceSquid.setHost(SysConf.getValue("hive.host")+":"+SysConf.getValue("hive.port"));
			dbSourceSquid.setUser_name(SysConf.getValue("hive.username"));
			this.setHiveInfo(dbSourceSquid, dbs);
			iNewDBAdapter = AdapterDataSourceManager.getAdapter(dbs);
			SelectSQL sql = new SelectSQL(dbSourceTable.getTable_name());
			sql.setDatabase(DataBaseType.HIVE);
			sql.setMaxCount(100);
			//String sql = "select * from "+dbSourceTable.getTable_name()+" limit 100";
			List<Map<String, Object>> dataList = iNewDBAdapter.queryForList(sql.createSQL());
			if (dataList.size() < 1) {
				out.setMessageCode(MessageCode.ERR_VALUEEMPTY);
			} else {
				outputMap.put("DataList", dataList);
			}
		} catch (Exception e) {
			// TODO: handle exception
			if(e instanceof SystemErrorException){
				//数据库连接信息出错
				SystemErrorException sysError = (SystemErrorException) e;
				if(sysError.getCode()==MessageCode.ERR_CONNECTION_NULL){
					out.setMessageCode(MessageCode.ERR_DATABASE_CONNECT);
				} else {
					out.setMessageCode(MessageCode.ERR_UNSUPPORTDATATYPE);
				}
			} else {
				String msg = e.getMessage();
				if(msg.contains("ErrorCode")){
					String errorCode=msg.substring(15,msg.indexOf(","));
					if("1146".equals(errorCode)){
						out.setMessageCode(MessageCode.TABLE_NOT_EXIST);
					} else {
						out.setMessageCode(MessageCode.ERR_UNSUPPORTDATATYPE);
					}
				}

			}
			logger.error("预览数据表信息异常", e);
		}finally
		{
			adapter.closeSession();
			if(iNewDBAdapter!=null){
				iNewDBAdapter.close();
			}
		}
		/*//SquidTableInfo request = JsonUtil.toGsonBean(info, SquidTableInfo.class);
		RepositoryServiceHelper dataBusiness = new RepositoryServiceHelper(token);
		SquidDataSet squidDataSet = dataBusiness.newQueryDatas(request, out);*/
		return outputMap;
	}
	/**
	 * 预览cassandra数据
	 * @param info json字符串
	 * @param out 异常处理
	 * @return
	 */
	public Map<String, Object> queryCassandraData(String info,ReturnValue out){
		Map<String, Object> outputMap = new HashMap<String, Object>();
		IRelationalDataManager adapter = DataAdapterFactory.getDefaultDataManager();
		INewDBAdapter cassandraAdapter = null;
		try {
			HashMap<String, Object> data=JsonUtil.toHashMap(info);
			int sourceTableId=Integer.parseInt(data.get("SourceTableId").toString()) ;
			adapter.openSession();
			//根据sourceTableId查询对象
			ISourceTableDao sourceTableDao=new SourceTableDaoImpl(adapter);
			DBSourceTable dbSourceTable=sourceTableDao.getObjectById(sourceTableId, DBSourceTable.class);
			//根据Source_squid_id()查询ds_sql_connection对象
			ISquidDao squidDao=new SquidDaoImpl(adapter);
			CassandraConnectionSquid connectionSquid=squidDao.getSquidForCond(dbSourceTable.getSource_squid_id(),CassandraConnectionSquid.class);
			DBConnectionInfo dbs = CassandraAdapter.getCassandraConnection(connectionSquid);
			cassandraAdapter = AdapterDataSourceManager.getAdapter(dbs);
			SelectSQL sql = new SelectSQL(connectionSquid.getKeyspace()+"."+dbSourceTable.getTable_name());
			sql.setDatabase(DataBaseType.CASSANDRA);
			sql.setMaxCount(100);
			List<Map<String, Object>> dataList = cassandraAdapter.queryForList(sql.createSQL());
			if (dataList.size() < 1) {
				out.setMessageCode(MessageCode.ERR_VALUEEMPTY);
			} else {
				outputMap.put("DataList", dataList);
			}

		} catch (Exception e) {
			// TODO: handle exception
			if(e instanceof SystemErrorException){
				//数据库连接信息出错
				SystemErrorException sysError = (SystemErrorException) e;
				if(sysError.getCode()==MessageCode.ERR_CONNECTION_NULL){
					out.setMessageCode(MessageCode.ERR_DATABASE_CONNECT);
				} else {
					out.setMessageCode(MessageCode.ERR_UNSUPPORTDATATYPE);
				}
			} else {
				String msg = e.getMessage();
				if(msg.contains("ErrorCode")){
					String errorCode=msg.substring(15,msg.indexOf(","));
					if("1146".equals(errorCode)){
						out.setMessageCode(MessageCode.TABLE_NOT_EXIST);
					} else {
						out.setMessageCode(MessageCode.ERR_UNSUPPORTDATATYPE);
					}
				}

			}
			logger.error("预览数据表信息异常", e);
		} finally {
			adapter.closeSession();
			if(cassandraAdapter!=null) {
				cassandraAdapter.close();
			}
		}
		return outputMap;
	}

	public void setDBInfo(DBSourceSquid dbSourceSquid, DBConnectionInfo dbs) {
		// 获取数据库类型
		dbs.setDbType(DataBaseType.parse(dbSourceSquid.getDb_type()));
		// 获取username
		dbs.setUserName(dbSourceSquid.getUser_name());
		// 获取password
		dbs.setPassword(dbSourceSquid.getPassword());
		// 主机名
		dbs.setHost(dbSourceSquid.getHost());
		// 数据库名
		dbs.setDbName(dbSourceSquid.getDb_name());
		// 端口
		dbs.setPort(dbSourceSquid.getPort());
	}

	public void setHiveInfo(SystemHiveConnectionSquid dbSourceSquid, DBConnectionInfo dbs) {
		// 获取数据库类型
		dbs.setDbType(DataBaseType.parse(dbSourceSquid.getDb_type()));
		// 获取username
		dbs.setUserName(dbSourceSquid.getUser_name());
		// 获取password
		dbs.setPassword(dbSourceSquid.getPassword());
		// 主机名
		dbs.setHost(dbSourceSquid.getHost());
		// 数据库名
		dbs.setDbName(dbSourceSquid.getDb_name());
		// 端口
		dbs.setPort(dbSourceSquid.getPort());
	}

	/**
	 * 获取列的名称和类型
	 * @return
	 */
	private Map<String,String> getNameAndType(List<SourceColumn> sourceColumns,int dbType)
	{
		Map<String,String> map=new HashMap<String,String>();
		for(SourceColumn sourceColumn:sourceColumns)
		{
			//KEY:列名   value:字段类型+&+长度+&+数据库类型
			map.put(sourceColumn.getName(), sourceColumn.getData_type()+"&"+sourceColumn.getLength()+"&"+dbType);
		}
		return map;
	}

	/**
	 * 获取hive列的名称和类型
	 * @param sourceColumns
	 * @param dbType
     * @return
     */
	private Map<String,String> getHiveNameAndType(List<SourceColumn> sourceColumns,int dbType,DBSourceTable hive){
		Map<String,String> map=new HashMap<String,String>();
		for(SourceColumn sourceColumn:sourceColumns)
		{
			map.put(hive.getTable_name()+"."+sourceColumn.getName(), sourceColumn.getData_type()+"&"+sourceColumn.getLength()+"&"+dbType);
		}
		return map;
	}
	/**
	 * 
	 * 作用描述：
	 * 修改说明：
	 *@param info json字符串
	 *@param out 异常处理
	 *@return
	 */
	public SquidDataSet queryRuntimeData(String info,ReturnValue out){
		logger.debug(String.format("queryRuntimeData-info=%s", info));
		SquidRunTimeProperties request = JsonUtil.toGsonBean(info, SquidRunTimeProperties.class);
		SquidDataSet squidDataSet = null;
		if(request!=null){
			squidDataSet = new RepositoryServiceHelper(TokenUtil.getToken()).queryRuntimeData(request, out);
		}else{
			out.setMessageCode(MessageCode.DESERIALIZATION_FAILED);
		}
		return squidDataSet;
	}

}
