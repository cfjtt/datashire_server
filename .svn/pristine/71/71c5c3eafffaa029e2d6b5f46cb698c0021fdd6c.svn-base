package com.eurlanda.datashire.sprint7.service.squidflow;

import com.eurlanda.datashire.adapter.DataAdapterFactory;
import com.eurlanda.datashire.adapter.IRelationalDataManager;
import com.eurlanda.datashire.dao.ISquidFlowStatusDao;
import com.eurlanda.datashire.dao.impl.SquidFlowStatusDaoImpl;
import com.eurlanda.datashire.entity.Project;
import com.eurlanda.datashire.entity.Repository;
import com.eurlanda.datashire.entity.SquidFlowStatus;
import com.eurlanda.datashire.entity.operation.DataEntity;
import com.eurlanda.datashire.entity.operation.WhereCondition;
import com.eurlanda.datashire.enumeration.DSObjectType;
import com.eurlanda.datashire.enumeration.DataStatusEnum;
import com.eurlanda.datashire.enumeration.MatchTypeEnum;
import com.eurlanda.datashire.enumeration.SystemTableEnum;
import com.eurlanda.datashire.sprint7.packet.InfoPacket;
import com.eurlanda.datashire.sprint7.plug.GetParam;
import com.eurlanda.datashire.sprint7.plug.ProjectPlug;
import com.eurlanda.datashire.sprint7.plug.SupportPlug;
import com.eurlanda.datashire.utility.CalcSquidFlowStatus;
import com.eurlanda.datashire.utility.JsonUtil;
import com.eurlanda.datashire.utility.MessageCode;
import com.eurlanda.datashire.utility.ReturnValue;
import org.apache.log4j.Logger;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectService extends SupportPlug implements IProjectService{
	static Logger logger = Logger.getLogger(DataShirService.class);// 记录日志
	public ProjectService(String token) {
		super(token);
	}
	/**
	 * 创建Project对象集合
	 * 作用描述：
	 * 1、 根据传入的Project对象集合调用ProjectPlug的创createProjects创建Project对象集合
	 * 2、创建成功——根据Project集合对象里的Key查询相对应的ID封装成InfoPacket对象集合返回
	 * 验证：
	 * Project对象集合不能为空且必须有数据
	 * Project对象集合的每个Key必须有值
	 * 修改说明：
	 *@param projects project对象集合
	 *@param out 异常返回
	 *@return
	 */
	public List<InfoPacket> createProject(List<Project> projects,ReturnValue out){
		logger.debug(String.format("createProject-projectList.size()=%s", projects.size()));
		//定义接收返回结果集
		List<InfoPacket> infoPackets = new ArrayList<InfoPacket>();
		try {
			//查询来源RePository
				ProjectPlug	projectPlug = new ProjectPlug(adapter);
				boolean create = false;
				create = projectPlug.createProjects(projects, out);
				//新增成功
				if(create){
					//根据Key查询出新增的ID
					for (Project project : projects) {
						//获得Key
						String key = project.getKey();
						int id = projectPlug.getProjectId(key, out);
						InfoPacket infoPacket = new InfoPacket();
						infoPacket.setCode(1);
						infoPacket.setId(id);
						infoPacket.setType(DSObjectType.PROJECT);
						infoPacket.setKey(key);
						infoPackets.add(infoPacket);
					}
				}
				logger.debug(String.format("createUsers-return=%s",infoPackets ));
		} catch (Exception e) {
			out.setMessageCode(MessageCode.ERR_ARRAYS);
		}finally{ //释放连接
			adapter.commitAdapter();
		}
		return infoPackets;
		
	}

	/**
	 * 修改Project
	 * 作用描述：
	 * 1、 根据ＩＤ修改Ｐｒｏｊｅｃｔ信息
	 * 2、创建成功——根据Project集合对象里的Key查询相对应的ID封装成InfoPacket对象集合返回
	 * 验证：
	 * 调用方法前确保Project对象集合不为空，并且Project对象集合里的每个Project对象的Id不为空
	 * 修改说明：
	 *@param projects project对象集合
	 *@param out 异常处理
	 *@return
	 */
	public List<InfoPacket> updateProjects(List<Project> projects,ReturnValue out){
		logger.debug(String.format("updateProjects-projectList.size()=%s", projects.size()));
		boolean create = false;
		List<InfoPacket> infoPackets = new ArrayList<InfoPacket>();
		try {
			//封装批量新增数据集
			List<List<DataEntity>>  paramList = new ArrayList<List<DataEntity>>();
			//封装条件集合
			List<List<WhereCondition>>  whereCondList = new ArrayList<List<WhereCondition>>();
			//调用转换类
			GetParam getParam = new GetParam();
			for (Project project : projects) {
				//参数
				List<DataEntity> dataEntitys =  new ArrayList<DataEntity>();
				getParam.getProject(project, dataEntitys);
				paramList.add(dataEntitys);
				//条件
				List<WhereCondition> whereConditions = new ArrayList<WhereCondition>();
				WhereCondition whereCondition = new WhereCondition();
				whereCondition.setAttributeName("ID");
				whereCondition.setDataType(DataStatusEnum.INT);
				whereCondition.setMatchType(MatchTypeEnum.EQ);
				whereCondition.setValue(project.getId());
				whereConditions.add(whereCondition);
				whereCondList.add(whereConditions);
				
			}
			//调用批量修改
			create = adapter.updatBatch(SystemTableEnum.DS_PROJECT.toString(), paramList, whereCondList, out);
//			//查询返回结果
//			if(create){
//				ProjectPlug projectPlug = new ProjectPlug(adapter);
//				//定义接收返回结果集
//				//根据Key查询出新增的ID
//				for (Project project : projects) {
//					//获得Key
//					String key = project.getKey();
//					int id = projectPlug.getProjectId(key, out);
//					InfoPacket infoPacket = new InfoPacket();
//					infoPacket.setCode(1);
//					infoPacket.setId(id);
//					infoPacket.setType(DSObjectType.PROJECT);
//					infoPacket.setKey(key);
//					infoPackets.add(infoPacket);
//				}
//			}
//			logger.debug(String.format("updateProjects-return=%s",create ));
		} catch (Exception e) {
			logger.error("updateProjects-return=%s",e);
			out.setMessageCode(MessageCode.ERR_PROJECT_LIST_NULL);
		}finally{
			//释放
			adapter.commitAdapter();
		}
		
		return infoPackets;
	}
	
	/**
	 * 获得Project
	 * 作用描述：
	 * 根据repository对象的信息获得相应数据库下的所有Project
	 * 业务描述：
	 * 	1、根据Repository信息切换到指定的Repository物理数据库
	 * 	2、查询所有的Project信息
	 * 验证：
	 * repository对象不为空
	 * 修改说明：
	 *@param repository repository对象
	 *@return
	 */
	public Project[] queryProjects(Repository repository,ReturnValue out){
		ProjectPlug plug = null;
		Project[] projects = null;
		try {
			//路径不为空的情况下(指定创建路径)
			adapter = DataAdapterFactory.newInstance().getAdapter(repository.getRepository_db_name());
			plug = new  ProjectPlug(adapter);
			projects = plug.getProjects(out,repository);
		} catch (Exception e) {
			out.setMessageCode(MessageCode.ERR_PROJECT_LIST_NULL);
		}finally{
			//切换Repository连接
			adapterFactory.addTokenAdapter(token, adapter);
			adapter.commitAdapter();
            /**
			User user = CommonConsts.UserSession.get(token);
			if(user!=null){
				user.setRepository(repository);
				logger.info("[激活仓库] "+user.getUser_name()+"\t"+repository.getRepository_db_name());
			}else{
				logger.warn("[获取用户当前会话为空] "+token);
			}  */
		}
		return projects;
	}
	
	/**
	 * project重命名
	 * @param info
	 * @param out
	 * @return
	 */
	public Map<String, Object> updProject(String info, ReturnValue out){
		Map<String, Object> outputMap = new HashMap<String, Object>();
		IRelationalDataManager adapter3 = DataAdapterFactory.getDefaultDataManager();
		adapter3.openSession();
		boolean flag = false;
		try {
			Map<String, Object> parmsMap = JsonUtil.toHashMap(info);
			Project tempProject = JsonUtil.toGsonBean(parmsMap.get("Project")+"", Project.class);
			//切换到系统数据库
			ISquidFlowStatusDao squidFlowStatusDao = new SquidFlowStatusDaoImpl(adapter3);
			List<SquidFlowStatus>  statusList = squidFlowStatusDao.getSquidFlowStatusByProject(tempProject.getRepository_id(), tempProject.getId());
			Map<String, Object> map = CalcSquidFlowStatus.calcStatus(statusList);
			if(Integer.parseInt(map.get("schedule").toString())>0
					||Integer.parseInt(map.get("checkout").toString())>0){
				out.setMessageCode(MessageCode.WARN_UPDATEPROJECT);
				return null;
			}else{
				if (tempProject!=null){
					Project project = squidFlowStatusDao.getObjectById(tempProject.getId(), Project.class);
					if (project!=null){
						flag = squidFlowStatusDao.update(tempProject);
						if (flag){
							return outputMap;
						}else{
							out.setMessageCode(MessageCode.SQL_ERROR);
							return null;
						}
					}else{
						out.setMessageCode(MessageCode.ERR_DS_PROJECT_NULL);
						return null;
					}
				}
			}
		} catch (Exception e) {
			logger.error("[获取updProject=========================================exception]", e);
			try {
				adapter3.rollback();
			} catch (SQLException e1) {
				logger.error("rollback err!", e1);
			}
			out.setMessageCode(MessageCode.SQL_ERROR);
		} finally {
			if(null!=adapter3)
			{
				adapter3.closeSession();
			}
		}
		return null;
	}
}
