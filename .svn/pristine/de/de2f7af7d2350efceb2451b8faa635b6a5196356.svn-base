<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
                        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
       default-lazy-init="false">
    <!-- default-lazy-init 必须要设为false -->
    <bean class="com.eurlanda.datashire.server.annotation.CommandProcessor" lazy-init="false" name="commandProcessor"/>

    <!-- 引入属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:/config/config.properties" />

    <aop:aspectj-autoproxy />

    <!-- server配置数据源1 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}" />
        <property name="minIdle" value="${jdbc.pool.minIdle}" />
        <property name="maxActive" value="${jdbc.pool.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="${validationQuery.sql}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- cloud配置数据源1 -->
    <bean id="cloud_datasource" class="com.alibaba.druid.pool.DruidDataSource"  init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${cloud.url}" />
        <property name="username" value="${cloud.username}" />
        <property name="password" value="${cloud.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}" />
        <property name="minIdle" value="${jdbc.pool.minIdle}" />
        <property name="maxActive" value="${jdbc.pool.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="${validationQuery.sql}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- JDBC配置 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
    </bean>

    <!--cloudTemplate-->
    <bean id="cloudTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="cloud_datasource" />
        </property>
    </bean>

    <!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.eurlanda.datashire.server.model"/>
        <property name="typeAliasesSuperType" value="com.eurlanda.datashire.server.model.Base.BaseObject"/>
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
        <property name="configLocation" value="classpath:/mybatis-config.xml"/>
    </bean>

    <!-- 扫描basePackage下所有以@Repository注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.eurlanda.datashire.server.dao"/>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    </bean>

    <!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 以前 servie层配置 -->
    <context:component-scan base-package="com.eurlanda.datashire.sprint7.service" scope-resolver="com.eurlanda.datashire.utility.MyResolver" />
    <context:component-scan base-package="com.eurlanda.datashire.sprint7.action.metadata" scope-resolver="com.eurlanda.datashire.utility.MyResolver"/>
    <context:component-scan base-package="com.eurlanda.datashire.adapter" />
    <context:component-scan base-package="com.eurlanda.datashire.complieValidate" scope-resolver="com.eurlanda.datashire.utility.MyResolver"/>
    <context:component-scan base-package="com.eurlanda.datashire.squidVersion" scope-resolver="com.eurlanda.datashire.utility.MyResolver"/>
    <context:component-scan base-package="com.eurlanda.datashire.modifyInterface" scope-resolver="com.eurlanda.datashire.utility.MyResolver"/>
    <context:component-scan base-package="com.eurlanda.datashire.cloudService" scope-resolver="com.eurlanda.datashire.utility.MyResolver" />
    <context:component-scan base-package="com.eurlanda.datashire.userDefinedService" scope-resolver="com.eurlanda.datashire.utility.MyResolver" />
    <context:component-scan base-package="com.eurlanda.datashire.destHiveService" scope-resolver="com.eurlanda.datashire.utility.MyResolver" />
    <context:component-scan base-package="com.eurlanda.datashire.statisticsService" scope-resolver="com.eurlanda.datashire.utility.MyResolver" />
    <context:component-scan base-package="com.eurlanda.datashire.destCassandraService" scope-resolver="com.eurlanda.datashire.utility.MyResolver" />
    <!-- dao层配置 -->
    <context:component-scan base-package="com.eurlanda.datashire.dao" />

    <!-- 重构后的 -->
    <context:component-scan base-package="com.eurlanda.datashire.server.dao" />
    <context:component-scan base-package="com.eurlanda.datashire.server.service"/>
    <context:component-scan base-package="com.eurlanda.datashire.server.api"/>
</beans>