package com.eurlanda.datashire.server.service;

import com.alibaba.fastjson.JSONArray;
import com.eurlanda.datashire.entity.Squid;
import com.eurlanda.datashire.enumeration.TransformationTypeEnum;
import com.eurlanda.datashire.server.dao.*;
import com.eurlanda.datashire.server.model.*;
import com.eurlanda.datashire.server.model.Base.SquidModelBase;
import com.eurlanda.datashire.utility.JsonUtil;
import com.eurlanda.datashire.utility.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * Created by test on 2017/11/24.
 */
@Service
public class PivotSquidService {

    @Autowired
    private PivotSquidDao pivotSquidDao;
    @Autowired
    private ColumnDao columnDao;
    @Autowired
    private GetMeatDataService getMeatDataService;
    @Autowired
    private SquidLinkDao squidLinkDao;
    @Autowired
    private TransformationDao transformationDao;
    @Autowired
    private TransformationLinkDao transformationLinkDao;
    @Autowired
    private TransformationInputsDao transformationInputsDao;
    @Autowired
    private SquidDao squidDao;

    public int insertPivotSquid(PivotSquid pivotSquid){
        pivotSquidDao.insertPivotSquid(pivotSquid);
        return pivotSquid.getId();
    }
    public int updatePivotSquid(PivotSquid pivotSquid){
        return  pivotSquidDao.updatePivotSquid(pivotSquid);
    }
    public PivotSquid selectByPrimaryKey(Integer id) {
        return pivotSquidDao.selectByPrimaryKey(id);
    }


    public Map<String,Object> generatePivotColumns(PivotSquid pivotSquid) throws Exception{
        Map<String,Object> map = new HashMap<>();


        //分组列，value,pivot列不能重复 // TODO: 2017/11/28


        //更新pivotSquid
        updatePivotSquid(pivotSquid);
        //1.生成转换后的column,注意类型是value列的类型
        String pivotValueJson = pivotSquid.getPivotColumnValue();
        List<String> pivotValue = JSONArray.parseArray(pivotValueJson,String.class);
        //去重处理
        HashSet<String> noEqualsValue = new HashSet<>(pivotValue);
        //用来批量添加的column集合
        List<Column> columns=new ArrayList<>();
        //查询右侧的transformation
        List<Transformation> transformationRightList = transformationDao.selectTransformationBySquidId(pivotSquid.getId());;
        //用来批量添加的左边的transformation集合
        List<Transformation> transformationLeftList = new ArrayList<>();
        //用来需要的添加的transformation集合
        List<Transformation> transformations=new ArrayList<>();
        //用来批量添加的transformationLink集合
        List<TransformationLink> transformationLinkList=new ArrayList<>();
        //用来批量添加的referenceColumn集合
        List<ReferenceColumn> referenceColumns=new ArrayList<>();
        //获取value列的字段信息
        Column valueColum = columnDao.selectByPrimaryKey(pivotSquid.getValueColumnId());
        //查询出上游的SquidLink
        SquidLink squidLink = squidLinkDao.getSquidLinkListByToSquidId(pivotSquid.getId());
        int noGroupColumnOrder = 0;
        for(String pivotColumn : noEqualsValue){
            Column column = new Column();
            column.setData_type(valueColum.getData_type());
            column.setAggregation_type(valueColum.getAggregation_type());
            column.setLength(valueColum.getLength());
            column.setPrecision(valueColum.getPrecision());
            column.setNullable(valueColum.isNullable());
            column.setRelative_order(++noGroupColumnOrder);
            //如果包含中文就转换为自定义名字
           if(pivotColumn == null){//允许有NULL值行
               column.setName("col_NULL");
           }else if(StringUtils.isHavaChinese(pivotColumn)){//判断是否有汉字
               column.setName("col_"+valueColum.getRelative_order());
           }else if(StringUtils.isStartWithNumber(pivotColumn)){ //判断是否以数字开头
               column.setName("col_"+pivotColumn);
           }else if(pivotColumn.equals("")){ //空字符串
               column.setName("col_emptyStr");
           }else {
               column.setName(pivotColumn);
           }
            column.setDescription(pivotColumn);
            column.setSquid_id(pivotSquid.getId());

            columns.add(column);
        }
        //非分组列入库
        columnDao.insert(columns);
        List<Integer> noGroupByColumnIdList = new ArrayList<>();
        for(Column noGruopByColumn : columns){
            noGroupByColumnIdList.add(noGruopByColumn.getId());//保存非分组列columnId
        }

        //添加分组列
        String groupColumnIds = pivotSquid.getGroupByColumnIds();
        String[] groupByIds = groupColumnIds.split(",");

        List<Column> groupByColumnList = new ArrayList<>();

        int groupColumnOrder = noEqualsValue.size();
        for (String columnId : groupByIds){

            if(columnId.equals("") || columnId == null){
                continue;
            }
            Column newColumn = columnDao.selectByPrimaryKey(Integer.parseInt(columnId));
            newColumn.setSquid_id(pivotSquid.getId());
            newColumn.setId(null);
            newColumn.setRelative_order(++groupColumnOrder);
            groupByColumnList.add(newColumn);
        }
        //分组列column入库
        if(groupByColumnList.size() > 0){
            columnDao.insert(groupByColumnList);
        }


        List<Integer> groupByColumnIdList = new ArrayList<>();
        for(Column gruopByColumn : groupByColumnList){
            groupByColumnIdList.add(gruopByColumn.getId());//保存分组列columnId
        }


        //整合所有的columns传给前台
        columns.addAll(groupByColumnList);
        map.put("ColumnList",columns);
        //2.生成transmations
        //3.生成transformationLinks
        //右侧虚拟transformation在创建link的时间已经添加过了
        //添加左侧虚拟transformation
        for(Column column:columns){
            transformationLeftList.add(getMeatDataService.initTransformation(squidLink.getTo_squid_id(),column.getId(),TransformationTypeEnum.VIRTUAL.value(),column.getData_type(),1));
        }
        transformations.addAll(transformationLeftList);
        transformationDao.insert(transformations);
        transformations.addAll(transformationRightList);
        List<com.eurlanda.datashire.server.model.TransformationInputs> transformationInputsLists=new ArrayList<>();
        for(Transformation transformation : transformationLeftList){
            List<Map<String,Object>> mapList=SquidLinkService.Inputscache.get(transformation.getTranstype()+"");
            if(mapList != null && mapList.size() > 0){
                List<com.eurlanda.datashire.server.model.TransformationInputs> transformationInputsList=new ArrayList<>();
                for(Map<String,Object> inputsMap:mapList){
                    com.eurlanda.datashire.server.model.TransformationInputs transformationInputs=new com.eurlanda.datashire.server.model.TransformationInputs();
                    String description=inputsMap.get("description").toString();
                    String relative_order=inputsMap.get("inputOrder").toString();
                    transformationInputs.setRelative_order(Integer.parseInt(relative_order));
                    transformationInputs.setInput_Data_Type(transformation.getOutput_data_type());
                    transformationInputs.setDescription(description);
                    transformationInputs.setSource_transform_id(0);
                    transformationInputs.setTransformationId(transformation.getId());
                    transformationInputsList.add(transformationInputs);
                }
                transformation.setInputs(transformationInputsList);
                transformationInputsLists.addAll(transformationInputsList);
            }
        }
        //批量创建transformationInputs
        transformationInputsDao.insert(transformationInputsLists);
        map.put("TransformationList",transformations);
        //初始化transformationLink
        Integer rightTransformationId = null;
        for(int i = 0; i < transformationRightList.size(); i++){
            Integer rigthTransformationColumnId = transformationRightList.get(i).getColumn_id();
            if((int)valueColum.getId() == (int)rigthTransformationColumnId){
                rightTransformationId = transformationRightList.get(i).getId();
            }
        }



        //pivot列的column与原value列相连
        for(int i = 0 ;i < transformationLeftList.size();i++){
            TransformationLink transformationLink = null;
            boolean flag = false;
            for(int j = 0; j < noGroupByColumnIdList.size();j++){
                if((int)transformationLeftList.get(i).getColumn_id() == (int)noGroupByColumnIdList.get(j)){//非分组列与原value列相连
                    transformationLink = getMeatDataService.mergeTransformationLink(rightTransformationId,transformationLeftList.get(i).getId(),i+1);
                    transformationLinkList.add(transformationLink);
                    flag = true;
                }
            }
            if (flag){
                continue;
            }
            for(int j = 0; j < transformationRightList.size();j++){
                for(int k = 0; k < groupByIds.length; k++){
                    if(groupByIds[k].equals(transformationRightList.get(j).getColumn_id()+"")){//分组列与原分组列列相连
                        transformationLink = getMeatDataService.mergeTransformationLink(transformationRightList.get(j).getId(),transformationLeftList.get(i).getId(),i+1);
                        transformationLinkList.add(transformationLink);
                    }
                }

            }

        }
        //批量添加transformationLink
        transformationLinkDao.insert(transformationLinkList);
        map.put("TransformationLinkList",transformationLinkList);
        //根据下游查询下下游  同步下游
        List<SquidLink> squidLinks=squidLinkDao.getSquidLinkListByFromSquid(pivotSquid.getId());
        if(squidLinks!=null && squidLinks.size()>0){
            for(SquidLink squidLink1:squidLinks){
                SquidModelBase squidModelBase=squidDao.selectByPrimaryKey(squidLink1.getTo_squid_id());
                getMeatDataService.synchronousInsertColumn(pivotSquid.getId(),squidModelBase.getId(),squidModelBase.getSquid_type(),null,columns,referenceColumns);
            }
        }

        return map;
    }

}
