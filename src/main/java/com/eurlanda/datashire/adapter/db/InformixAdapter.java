package com.eurlanda.datashire.adapter.db;

import com.eurlanda.datashire.entity.DBConnectionInfo;
import com.eurlanda.datashire.entity.operation.ColumnInfo;
import com.eurlanda.datashire.utility.objectsql.TemplateParser;

/**
 * IBM informix关系数据库
 * @author yi.zhou
 *
 */
public class InformixAdapter  extends AbsDBAdapter implements INewDBAdapter {

	public InformixAdapter(DBConnectionInfo info) {
		super(info);
	}

	@Override
	protected String buildColumnSql(ColumnInfo col) {
		String column_template = "${colName} ${colType} ${nullable} ${auto_increment}";
		TemplateParser parser = new TemplateParser();
		parser.addParam("colName", col.getName());
		
		//String typeStr = DataTypeManager.decode(DataBaseType.MYSQL, col.getSystemDataType());
		String typeStr = col.getSystemDatatype().name();
		switch (col.getSystemDatatype()) {
		case NVARCHAR:
			parser.addParam("colType", typeStr+"("+col.getLength()+")");
			break;
		default:
			parser.addParam("colType", typeStr);
		}
		if (col.isNullable()&& !col.isIdentity()) {
			parser.addParam("nullable", "NULL");
		} else {
			parser.addParam("nullable", "NOT NULL");
		}
		if (col.isIdentity()) {
			parser.addParam("auto_increment", "generated by default as identity"); 
		}
		String sql= parser.parseTemplate(column_template);
		return sql;
	}
}
